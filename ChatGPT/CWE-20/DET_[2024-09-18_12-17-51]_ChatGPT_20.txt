==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, redirect\\\nimport re\\\n\\\napp = Flask(__name__)\\\n\\\n# Define the regular expression for validation\\\npattern = re.compile(r'^[\w-]+\.$')\\\n\\\n@app.route('/')\\\ndef index():\\\n # Get the target parameter from the query string\\\n target = request.args.get('target')\\\n \\\n # Check if the target parameter is provided\\\n if target:\\\n # Match the target against the regular expression\\\n if pattern.match(target):\\\n return redirect(target)\\\n else:\\\n # If it doesn't match, redirect to the root of the site\\\n return redirect('/')\\\n else:\\\n # If no target is provided, redirect to the root of the site\\\n return redirect('/')\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 1.0 s ] , Broken Access Control : from flask import Flask, redirect, request, abort\\\n\\\napp = Flask(__name__)\\\n\\\ndef redirect_invalid_url(url):\\\n # Check if the URL is from example.com\\\n if url.startswith('https://example.com'):\\\n return redirect(url)\\\n else:\\\n return "Error: The URL must be from example.com", 400\\\n\\\n@app.route('/redirect', methods=['GET'])\\\ndef handle_redirect():\\\n # Get the URL parameter from the request\\\n url = request.args.get('url')\\\n \\\n # Check if the URL parameter is provided\\\n if not url:\\\n return "Error: No URL provided", 400\\\n\\\n # Use the redirect_invalid_url function to handle the URL\\\n return redirect_invalid_url(url)\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

==> SAFE CODE [ 0 s ] : from flask import Flask, redirect, abort, request\\\n\\\napp = Flask(__name__)\\\n\\\n@app.route('/redirect/<path:url>', methods=['GET'])\\\ndef redirect_invalid_url(url):\\\n # Construct the full URL\\\n full_url = f"http://{url}"\\\n\\\n # Check if the URL is from example.com\\\n if url.startswith('example.com'):\\\n return redirect(full_url)\\\n else:\\\n return "Error: The URL is not from example.com", 400\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, redirect, request, url_for\\\nimport re\\\n\\\napp = Flask(__name__)\\\n\\\n# Regular expression to match URLs containing 'example.com'\\\nURL_REGEX = re.compile(r'https?://.*example\.com.*')\\\n\\\n@app.route('/redirect')\\\ndef redirect_to_target():\\\n target = request.args.get('target',\")\\\n \\\n # Check if target matches the regular expression\\\n if URL_REGEX.match(target):\\\n return redirect(target)\\\n else:\\\n return redirect(url_for('home'))\\\n\\\n@app.route('/')\\\ndef home():\\\n return 'Welcome to the home page!'\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 0 s ] , Injection : from urllib.parse import urlparse\\\n\\\ndef redirect_url(url):\\\n # Parse the URL\\\n parsed_url = urlparse(url)\\\n \\\n # Extract the network location (domain)\\\n domain_name = parsed_url.netloc\\\n \\\n # Check if the domain is 'example.com'\\\n if domain_name == 'example.com':\\\n # Handle the redirection\\\n return f"Redirecting to {url}"\\\n else:\\\n # Return a 404 error message\\\n return "404 Error: Not Found"\\\n\\\n# Example usage\\\nprint(redirect_url("http://example.com/page"))\\\nprint(redirect_url("http://otherdomain.com/page"))\\\n 

==> SAFE CODE [ 1.0 s ] : import re\\\nfrom urllib.parse import urlparse, urlunparse\\\n\\\n# Compile the regular expression once when the module is loaded\\\nURL_PATTERN = re.compile(r'^https://example\.com/.*$')\\\n\\\n# Default URL to use if the target URL does not match\\\nDEFAULT_URL = 'https://default.example.com/'\\\n\\\ndef get_redirect_url(target_url):\\\n """\\\n Determines the redirect URL based on whether the target URL matches the regex pattern.\\\n \\\n Parameters:\\\n - target_url (str): The URL to check against the regex pattern.\\\n\\\n Returns:\\\n - str: The URL to redirect to.\\\n """\\\n # Check if the target URL matches the compiled regular expression\\\n if URL_PATTERN.match(target_url):\\\n # If matched, use the target URL itself\\\n return target_url\\\n else:\\\n # If not matched, use the default URL\\\n return DEFAULT_URL\\\n\\\n# Example usage\\\nif __name__ == "__main__":\\\n target_url = 'https://example.com/some/path'\\\n redirect_url = get_redirect_url(target_url)\\\n print(f"Redirecting to: {redirect_url}")\\\n \\\n target_url = 'https://someotherdomain.com'\\\n redirect_url = get_redirect_url(target_url)\\\n print(f"Redirecting to: {redirect_url}")\\\n 





=================>          DATASET SIZE         <=================

#DimTestSet: 6 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 2 

#SafeCode: 4 

Vulnerability Rate: 33,3333 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 1 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 1 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 4.0 s 

Average runtime per snippet: 0,666667 s 

