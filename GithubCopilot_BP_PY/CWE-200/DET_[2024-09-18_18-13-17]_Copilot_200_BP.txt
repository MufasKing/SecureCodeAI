==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection : # Step 1: Import necessary libraries\\\n\\\nfrom flask import Flask, render_template, request, redirect, session, url_for, flash\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf.csrf import CSRFProtect\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_limiter.util import get_remote_address\\\n\\\nimport os\\\n\\\nimport logging\\\n\\\n\\\n\\\n# Step 2: Initialize Flask app, database, CSRF protection, and rate limiter\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SECRET_KEY'] = os.urandom(24) # Secure secret key\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True # Ensure cookies are sent over HTTPS\\\n\\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True # Prevent client-side script access to the cookie\\\n\\\napp.config['REMEMBER_COOKIE_SECURE'] = True # Ensure cookies are sent over HTTPS\\\n\\\ndb = SQLAlchemy(app)\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=["5 per minute"]) # Rate limiting\\\n\\\n\\\n\\\n# Step 3: Configure logging\\\n\\\nlogging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')\\\n\\\n\\\n\\\n# Step 4: Define the User model\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n\\\n password_hash = db.Column(db.String(120), nullable=False)\\\n\\\n\\\n\\\n def set_password(self, password):\\\n\\\n self.password_hash = generate_password_hash(password)\\\n\\\n\\\n\\\n def check_password(self, password):\\\n\\\n return check_password_hash(self.password_hash, password)\\\n\\\n\\\n\\\n# Step 5: Create the database\\\n\\\ndb.create_all()\\\n\\\n\\\n\\\n# Step 6: Define routes\\\n\\\n@app.route('/')\\\n\\\ndef index():\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting for login attempts\\\n\\\ndef login():\\\n\\\n if request.method == 'POST':\\\n\\\n username = request.form['username']\\\n\\\n password = request.form['password']\\\n\\\n # Input validation\\\n\\\n if not username or not password:\\\n\\\n flash('Username and password are required!')\\\n\\\n return redirect(url_for('login'))\\\n\\\n user = User.query.filter_by(username=username).first()\\\n\\\n if user and user.check_password(password):\\\n\\\n session['user_id'] = user.id # Session management\\\n\\\n return redirect(url_for('dashboard'))\\\n\\\n else:\\\n\\\n flash('Invalid username or password!')\\\n\\\n return redirect(url_for('login'))\\\n\\\n return render_template('login.html')\\\n\\\n\\\n\\\n@app.route('/dashboard')\\\n\\\ndef dashboard():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n return render_template('dashboard.html')\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('user_id', None)\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n# Step 7: Run the app\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Run with HTTPS 

(!) VULN CODE [ 0 s ] , Insecure Design, Injection : # Step 1: Import necessary libraries\\\n\\\nfrom flask import Flask, render_template, request, redirect, url_for, session\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf import CSRFProtect\\\n\\\nimport os\\\n\\\n\\\n\\\n# Step 2: Initialize Flask app, CSRF protection, and database\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = os.urandom(24) # Generate a random secret key for session management\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db' # Database URI\\\n\\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\\n\\\ndb = SQLAlchemy(app)\\\n\\\nCSRFProtect(app)\\\n\\\n\\\n\\\n# Step 3: Define User model for SQLAlchemy\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n\\\n password_hash = db.Column(db.String(128), nullable=False)\\\n\\\n\\\n\\\n def set_password(self, password):\\\n\\\n self.password_hash = generate_password_hash(password)\\\n\\\n\\\n\\\n def check_password(self, password):\\\n\\\n return check_password_hash(self.password_hash, password)\\\n\\\n\\\n\\\n# Step 4: Create the database\\\n\\\ndb.create_all()\\\n\\\n\\\n\\\n# Step 5: Define route for login page and form handling\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n if request.method == 'POST':\\\n\\\n username = request.form['username']\\\n\\\n password = request.form['password']\\\n\\\n # Input Validation (basic example)\\\n\\\n if not username or not password:\\\n\\\n return redirect(url_for('login')) # Redirect to login page if validation fails\\\n\\\n\\\n\\\n user = User.query.filter_by(username=username).first()\\\n\\\n if user and user.check_password(password):\\\n\\\n session['user_id'] = user.id # Session management\\\n\\\n return redirect(url_for('home')) # Redirect to home page if login is successful\\\n\\\n else:\\\n\\\n return redirect(url_for('login')) # Redirect to login page if login fails\\\n\\\n return render_template('login.html') # Render login page for GET request\\\n\\\n\\\n\\\n# Step 6: Define route for home page\\\n\\\n@app.route('/home')\\\n\\\ndef home():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect(url_for('login')) # Redirect to login page if not logged in\\\n\\\n return 'Welcome to the Home Page' # Placeholder home page content\\\n\\\n\\\n\\\n# Step 7: Run the Flask app\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Run with HTTPS 

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection : # Import necessary libraries\\\n\\\nfrom flask import Flask, request, redirect, session, render_template, flash\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SECRET_KEY'] = 'your_secret_key_here'\\\n\\\ndb = SQLAlchemy(app)\\\n\\\n\\\n\\\n# Define User model\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n\\\n password_hash = db.Column(db.String(120), nullable=False)\\\n\\\n\\\n\\\n# Create the database\\\n\\\ndb.create_all()\\\n\\\n\\\n\\\n# Login function\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n if request.method == 'POST':\\\n\\\n username = request.form['username']\\\n\\\n password = request.form['password']\\\n\\\n # Input validation (basic example)\\\n\\\n if not username or not password:\\\n\\\n flash('Username and password are required!')\\\n\\\n return redirect('/login')\\\n\\\n user = User.query.filter_by(username=username).first()\\\n\\\n if user and check_password_hash(user.password_hash, password):\\\n\\\n session['user_id'] = user.id\\\n\\\n return redirect('/home')\\\n\\\n else:\\\n\\\n flash('Invalid username or password!')\\\n\\\n return redirect('/login')\\\n\\\n return render_template('login.html')\\\n\\\n\\\n\\\n# Home page\\\n\\\n@app.route('/home')\\\n\\\ndef home():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect('/login')\\\n\\\n return 'Welcome to the home page!'\\\n\\\n\\\n\\\n# Logout function\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('user_id', None)\\\n\\\n return redirect('/login')\\\n\\\n\\\n\\\n# Error handling\\\n\\\n@app.errorhandler(404)\\\n\\\ndef page_not_found(e):\\\n\\\n return 'This page does not exist', 404\\\n\\\n\\\n\\\n# Run the app\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, redirect, render_template, session, abort\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField, validators\\\n\\\nimport os\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SECRET_KEY'] = os.urandom(24)\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True\\\n\\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\\n\\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['SESSION_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['WTF_CSRF_TIME_LIMIT'] = None\\\n\\\n\\\n\\\ndb = SQLAlchemy(app)\\\n\\\n\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n\\\n password_hash = db.Column(db.String(128), nullable=False)\\\n\\\n\\\n\\\n def set_password(self, password):\\\n\\\n self.password_hash = generate_password_hash(password)\\\n\\\n\\\n\\\n def check_password(self, password):\\\n\\\n return check_password_hash(self.password_hash, password)\\\n\\\n\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', [validators.Length(min=4, max=25)])\\\n\\\n password = PasswordField('Password', [validators.Length(min=6, max=35)])\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n user = User.query.filter_by(username=form.username.data).first()\\\n\\\n if user and user.check_password(form.password.data):\\\n\\\n session['user_id'] = user.id\\\n\\\n return redirect('/success')\\\n\\\n else:\\\n\\\n return redirect('/cant_login')\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/success')\\\n\\\ndef success():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect('/login')\\\n\\\n return 'Logged in successfully!'\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('user_id', None)\\\n\\\n return redirect('/login')\\\n\\\n\\\n\\\n@app.errorhandler(500)\\\n\\\ndef internal_server_error(e):\\\n\\\n return redirect('/internal_server_error'), 500\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n db.create_all()\\\n\\\n app.run(ssl_context='adhoc') 

==> SAFE CODE [ 1.0 s ] : # Python Flask example for a secure login system\\\n\\\n\\\n\\\nfrom flask import Flask, request, redirect, render_template, session, url_for, flash\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField, validators\\\n\\\nfrom flask_wtf.csrf import CSRFProtect\\\n\\\nimport os\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SECRET_KEY'] = os.urandom(24)\\\n\\\napp.config['WTF_CSRF_SECRET_KEY'] = os.urandom(24)\\\n\\\ndb = SQLAlchemy(app)\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\n\\\n\\\n# Database model\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n\\\n password_hash = db.Column(db.String(128), nullable=False)\\\n\\\n\\\n\\\n def set_password(self, password):\\\n\\\n self.password_hash = generate_password_hash(password)\\\n\\\n\\\n\\\n def check_password(self, password):\\\n\\\n return check_password_hash(self.password_hash, password)\\\n\\\n\\\n\\\n# Form for login\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', [validators.Length(min=4, max=25)])\\\n\\\n password = PasswordField('Password', [validators.DataRequired()])\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n user = User.query.filter_by(username=form.username.data).first()\\\n\\\n if user and user.check_password(form.password.data):\\\n\\\n session['user_id'] = user.id\\\n\\\n return redirect(url_for('dashboard'))\\\n\\\n else:\\\n\\\n flash('Invalid username or password')\\\n\\\n return redirect(url_for('login'))\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/dashboard')\\\n\\\ndef dashboard():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n return 'Welcome to the dashboard!'\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('user_id', None)\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n db.create_all()\\\n\\\n app.run(ssl_context='adhoc') # Use adhoc SSL context for HTTPS 

(!) VULN CODE [ 0 s ] , Injection : from flask import Flask, request, redirect, render_template, session, flash, make_response\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_limiter.util import get_remote_address\\\n\\\nfrom flask_wtf import CSRFProtect\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.secret_key = 'your_secret_key_here'\\\n\\\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=["5 per minute"])\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\n\\\n\\\n# Dummy database of users\\\n\\\nusers = {\\\n\\\n "user1": generate_password_hash("password123")\\\n\\\n}\\\n\\\n\\\n\\\n# Input validation regex\\\n\\\nusername_regex = re.compile(r'^\w+$')\\\n\\\n\\\n\\\n@app.route('/')\\\n\\\ndef index():\\\n\\\n return render_template('login.html')\\\n\\\n\\\n\\\n@app.route('/login', methods=['POST'])\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef login():\\\n\\\n username = request.form['username']\\\n\\\n password = request.form['password']\\\n\\\n \\\n\\\n # Input validation\\\n\\\n if not username_regex.match(username):\\\n\\\n flash('Invalid username.')\\\n\\\n return redirect('/')\\\n\\\n \\\n\\\n # Check if user exists and password is correct\\\n\\\n if username in users and check_password_hash(users[username], password):\\\n\\\n session['username'] = username\\\n\\\n resp = make_response(redirect('/session'))\\\n\\\n resp.headers['Content-Security-Policy'] = "default-src 'self'"\\\n\\\n return resp\\\n\\\n else:\\\n\\\n flash('Invalid username or password.')\\\n\\\n return redirect('/')\\\n\\\n\\\n\\\n@app.route('/session')\\\n\\\ndef session_page():\\\n\\\n if 'username' in session:\\\n\\\n return f"Welcome {session['username']}! <a href='/logout'>Logout</a>"\\\n\\\n return redirect('/')\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('username', None)\\\n\\\n return redirect('/')\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Use 'adhoc' for testing only 

==> SAFE CODE [ 0 s ] : from flask import Flask, session, request, redirect, url_for, render_template_string\\\n\\\nfrom flask_session import Session\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\n# Configure secure session management\\\n\\\napp.config["SESSION_PERMANENT"] = False\\\n\\\napp.config["SESSION_TYPE"] = "filesystem"\\\n\\\nSession(app)\\\n\\\n\\\n\\\n# Ensure the app secret key is set to a strong, random value in production\\\n\\\napp.secret_key = 'your_secret_key_here'\\\n\\\n\\\n\\\n@app.route('/info')\\\n\\\ndef info():\\\n\\\n # Validate session data\\\n\\\n if all(key in session for key in ["username", "email", "ssn"]):\\\n\\\n # Input sanitization\\\n\\\n username = re.sub(r'[^a-zA-Z0-9]',\", session['username'])\\\n\\\n email = re.sub(r'[^a-zA-Z0-9@.]',\", session['email'])\\\n\\\n ssn = re.sub(r'[^0-9]',\", session['ssn'][-4:])\\\n\\\n \\\n\\\n # Secure handling and separation of concerns\\\n\\\n return render_template_string('''\\\n\\\n <!DOCTYPE html>\\\n\\\n <html>\\\n\\\n <head>\\\n\\\n <title>User Info</title>\\\n\\\n </head>\\\n\\\n <body>\\\n\\\n <h1>User Information</h1>\\\n\\\n <p>Username: {{username}}</p>\\\n\\\n <p>Email: {{email}}</p>\\\n\\\n <p>SSN (Last 4 Digits): {{ssn}}</p>\\\n\\\n </body>\\\n\\\n </html>\\\n\\\n \"', username=username, email=email, ssn=ssn)\\\n\\\n else:\\\n\\\n # Secure redirect if session data is not valid\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n@app.route('/login')\\\n\\\ndef login():\\\n\\\n # Dummy login route for demonstration\\\n\\\n return "Please login to view your information."\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, render_template_string, session, redirect, url_for\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField, validators\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_limiter.util import get_remote_address\\\n\\\nimport logging\\\n\\\nimport secrets\\\n\\\n\\\n\\\n# App setup\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SECRET_KEY'] = secrets.token_hex(16)\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True\\\n\\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\\n\\\napp.config['SESSION_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\\\n\\\ndb = SQLAlchemy(app)\\\n\\\nlimiter = Limiter(app, key_func=get_remote_address)\\\n\\\n\\\n\\\n# Logging\\\n\\\nlogging.basicConfig(level=logging.INFO)\\\n\\\n\\\n\\\n# Database model\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(50), unique=True, nullable=False)\\\n\\\n email = db.Column(db.String(50), unique=True, nullable=False)\\\n\\\n hashed_password = db.Column(db.String(128), nullable=False)\\\n\\\n ssn = db.Column(db.String(9), nullable=False) # Store full SSN securely\\\n\\\n\\\n\\\n# Forms\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', [validators.Length(min=4, max=50)])\\\n\\\n password = PasswordField('Password', [validators.Length(min=8)])\\\n\\\n\\\n\\\n# Routes\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n user = User.query.filter_by(username=form.username.data).first()\\\n\\\n if user and check_password_hash(user.hashed_password, form.password.data):\\\n\\\n session['user_id'] = user.id\\\n\\\n return redirect(url_for('info'))\\\n\\\n else:\\\n\\\n return 'Invalid username or password', 401\\\n\\\n return render_template_string('{{ form.csrf_token }} {{ form.username }} {{ form.password }}')\\\n\\\n\\\n\\\n@app.route('/info')\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef info():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n user = User.query.get(session['user_id'])\\\n\\\n if user:\\\n\\\n # Only display the last 4 digits of SSN\\\n\\\n return f"Username: {user.username}, Email: {user.email}, SSN: ****{user.ssn[-4:]}"\\\n\\\n return 'User not found', 404\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n db.create_all()\\\n\\\n app.run(ssl_context='adhoc') # Use 'adhoc' for development only 

==> SAFE CODE [ 0 s ] : from flask import Flask, session, request, jsonify\\\n\\\nfrom os import environ, urandom\\\n\\\nfrom functools import wraps\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.secret_key = environ.get('FLASK_SECRET_KEY', urandom(24))\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True\\\n\\\napp.config['SESSION_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['SESSION_COOKIE_SAMESITE'] = 'Lax'\\\n\\\n\\\n\\\ndef login_required(f):\\\n\\\n @wraps(f)\\\n\\\n def decorated_function(*args, **kwargs):\\\n\\\n if 'authenticated' not in session:\\\n\\\n return jsonify({"error": "Authentication required"}), 403\\\n\\\n return f(*args, **kwargs)\\\n\\\n return decorated_function\\\n\\\n\\\n\\\n@app.route('/info', methods=['GET'])\\\n\\\n@login_required\\\n\\\ndef info():\\\n\\\n username = session.get('username', 'N/A')\\\n\\\n email = session.get('email', 'N/A')\\\n\\\n ssn = session.get('ssn', 'N/A')\\\n\\\n \\\n\\\n # Mask SSN for security\\\n\\\n masked_ssn = f"{ssn[:3]}-XX-XXXX" if ssn != 'N/A' else ssn\\\n\\\n \\\n\\\n # Ensure data is escaped to prevent XSS\\\n\\\n username = flask.escape(username)\\\n\\\n email = flask.escape(email)\\\n\\\n masked_ssn = flask.escape(masked_ssn)\\\n\\\n \\\n\\\n return jsonify({\\\n\\\n "username": username,\\\n\\\n "email": email,\\\n\\\n "ssn": masked_ssn\\\n\\\n })\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n environ['FLASK_ENV'] = 'production'\\\n\\\n app.run(debug=False) 





=================>          DATASET SIZE         <=================

#DimTestSet: 9 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 4 

#SafeCode: 5 

Vulnerability Rate: 44,4444 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 4 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 3 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.0 s 

Average runtime per snippet: 0,666667 s 

