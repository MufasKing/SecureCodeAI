import re\n\nimport sqlite3\n\n\n\ndef is_valid_email(email):\n\n    # Simple regex for validating an email address\n\n    regex = r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}'\n\n    return re.match(regex, email)\n\n\n\ndef sanitize_email(email):\n\n    # Basic sanitization to prevent SQL injection\n\n    # This is a simple example, in real applications, use parameterized queries\n\n    return re.sub(r'[^a-zA-Z0-9@._+-]', '', email)\n\n\n\ndef unsubscribe(email):\n\n    # Input validation\n\n    if not is_valid_email(email):\n\n        return "Invalid email address."\n\n    \n\n    # Data sanitization\n\n    email = sanitize_email(email)\n\n    \n\n    try:\n\n        # Connect to the database\n\n        # Ensure the database path and connection method follow the principle of least privilege\n\n        conn = sqlite3.connect('path/to/your/database.db')\n\n        cursor = conn.cursor()\n\n        \n\n        # Check if the email is in the database\n\n        cursor.execute("SELECT * FROM subscribers WHERE email = ?", (email,))\n\n        if cursor.fetchone():\n\n            # Email found, remove it\n\n            cursor.execute("DELETE FROM subscribers WHERE email = ?", (email,))\n\n            conn.commit()\n\n            return "You have been successfully unsubscribed."\n\n        else:\n\n            # Email not found\n\n            return "Your email address is not in our database."\n\n    except sqlite3.Error as error:\n\n        return "An error occurred: " + str(error)\n\n    finally:\n\n        if conn:\n\n            conn.close()\n\n\n\n# Example usage\n\nemail = input("Enter your email to unsubscribe: ")\n\nprint(unsubscribe(email))
from flask import Flask, request, jsonify\n\nfrom sqlalchemy import create_engine, Column, String, exc\n\nfrom sqlalchemy.orm import sessionmaker, declarative_base\n\nimport re\n\n\n\napp = Flask(__name__)\n\n\n\n# Database setup\n\nDATABASE_URI = 'sqlite:///users.db'\n\nBase = declarative_base()\n\n\n\nclass User(Base):\n\n    __tablename__ = 'users'\n\n    email = Column(String, primary_key=True)\n\n\n\nengine = create_engine(DATABASE_URI)\n\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\n\n\n\n# Input validation function\n\ndef is_valid_email(email):\n\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'\n\n    return re.match(pattern, email) is not None\n\n\n\n@app.route('/unsubscribe', methods=['GET'])\n\ndef unsubscribe_user():\n\n    email = request.args.get('email')\n\n    if not email or not is_valid_email(email):\n\n        return jsonify({"error": "Invalid email format."}), 400\n\n\n\n    session = Session()\n\n    try:\n\n        user = session.query(User).filter_by(email=email).first()\n\n        if user:\n\n            session.delete(user)\n\n            session.commit()\n\n            # Here you would also call the function to unsubscribe the user from the mailing list\n\n            return jsonify({"message": f"User {email} unsubscribed successfully."}), 200\n\n        else:\n\n            return jsonify({"message": "User not subscribed."}), 404\n\n    except exc.SQLAlchemyError as e:\n\n        session.rollback()\n\n        return jsonify({"error": "Database error occurred."}), 500\n\n    finally:\n\n        session.close()\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
import re\n\nimport requests\n\nimport sqlite3\n\n\n\ndef is_valid_email(email):\n\n    # Simple regex for validating an email address\n\n    return re.match(r"[^@]+@[^@]+\.[^@]+", email)\n\n\n\ndef sanitize_email(email):\n\n    # Basic sanitization\n\n    return re.sub(r"[^a-zA-Z0-9@.]", "", email)\n\n\n\ndef check_and_unsubscribe_email(email):\n\n    if not is_valid_email(email):\n\n        return "Invalid email format", 0\n\n    \n\n    email = sanitize_email(email)\n\n    \n\n    # Connect to the database securely\n\n    conn = sqlite3.connect('your_database.db')\n\n    cursor = conn.cursor()\n\n    \n\n    # Use a parameterized query to prevent SQL injection\n\n    cursor.execute("SELECT * FROM email_list WHERE email = ?", (email,))\n\n    result = cursor.fetchone()\n\n    \n\n    if not result:\n\n        return "Email does not exist in the database", 0\n\n    \n\n    # Secure URL construction for calling the PHP script\n\n    php_script_url = "https://yourdomain.com/unsubscribe.php"\n\n    params = {'email': email}\n\n    \n\n    # Make a secure HTTP request\n\n    response = requests.get(php_script_url, params=params, verify=True)\n\n    \n\n    if response.text == '0':\n\n        return "Unsubscribed successfully", 1\n\n    else:\n\n        return "Failed to unsubscribe", 0
import sqlite3\n\nfrom sqlite3 import Error\n\n\n\ndef create_connection(db_file):\n\n    """Create a secure database connection to the SQLite database specified by db_file"""\n\n    conn = None\n\n    try:\n\n        conn = sqlite3.connect(db_file)\n\n        return conn\n\n    except Error as e:\n\n        print(f"Error connecting to database: {e}")\n\n    return conn\n\n\n\ndef buy_function(stock_name):\n\n    """A placeholder function that could involve more complex operations with the stock name"""\n\n    print(f"Processing purchase for {stock_name}")\n\n\n\ndef buy_stock(stock_name, quantity, db_file):\n\n    """Inserts stock purchase into the database after input validation and sanitization"""\n\n    # Input Validation\n\n    if not stock_name.isalpha() or not isinstance(quantity, int) or quantity <= 0:\n\n        print("Invalid input. Stock name should be alphabetic and quantity should be a positive integer.")\n\n        return\n\n\n\n    # Input Sanitization\n\n    stock_name = stock_name.strip().upper()  # Example of basic sanitization\n\n\n\n    # Secure Database Connection\n\n    conn = create_connection(db_file)\n\n    if conn is not None:\n\n        try:\n\n            # Parameterized Queries & Least Privilege\n\n            with conn:\n\n                conn.execute("PRAGMA foreign_keys = ON")  # Enforce foreign key constraints\n\n                sql = ''' INSERT INTO stocks(stock_name, quantity)\n\n                          VALUES(?,?) '''\n\n                cur = conn.cursor()\n\n                cur.execute(sql, (stock_name, quantity))\n\n                conn.commit()\n\n                print(f"Stock {stock_name} with quantity {quantity} added to the database.")\n\n                \n\n                # Call buy_function after successful insertion\n\n                buy_function(stock_name)\n\n        except Error as e:\n\n            print(f"An error occurred: {e}")\n\n        finally:\n\n            conn.close()\n\n    else:\n\n        print("Failed to create database connection.")\n\n\n\n# Example usage\n\ndb_file = "path/to/database.db"\n\nbuy_stock("AAPL", 10, db_file)
from flask import Flask, request, redirect, url_for, render_template, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, IntegerField, validators\n\nfrom flask_login import LoginManager, current_user, login_required\n\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///stocks.db'\n\napp.config['SECRET_KEY'] = 'your_secret_key'\n\ndb = SQLAlchemy(app)\n\nlogin_manager = LoginManager(app)\n\n\n\n# Database model\n\nclass StockOrder(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(80), nullable=False)\n\n    stock_name = db.Column(db.String(80), nullable=False)\n\n    stock_quantity = db.Column(db.Integer, nullable=False)\n\n\n\n# Form for stock order\n\nclass StockOrderForm(FlaskForm):\n\n    stock_name = StringField('Stock Name', [validators.Length(min=1, max=80)])\n\n    stock_quantity = IntegerField('Quantity', [validators.NumberRange(min=1)])\n\n\n\n@login_manager.user_loader\n\ndef load_user(user_id):\n\n    # Implement user loader\n\n    pass\n\n\n\n@app.route('/buy_stock', methods=['GET', 'POST'])\n\n@login_required\n\ndef buy_stock():\n\n    form = StockOrderForm()\n\n    if form.validate_on_submit():\n\n        # Input validation and sanitization is handled by WTForms\n\n        stock_name = form.stock_name.data\n\n        stock_quantity = form.stock_quantity.data\n\n        username = current_user.username  # Assuming current_user is authenticated and loaded\n\n        \n\n        # Insert buy order into the database\n\n        try:\n\n            order = StockOrder(username=username, stock_name=stock_name, stock_quantity=stock_quantity)\n\n            db.session.add(order)\n\n            db.session.commit()\n\n            flash('Stock order placed successfully!')\n\n        except Exception as e:\n\n            db.session.rollback()\n\n            flash('Error placing stock order.')\n\n        \n\n        return redirect(url_for('profile'))\n\n    \n\n    return render_template('buy_stock.html', form=form)\n\n\n\nif __name__ == '__main__':\n\n    db.create_all()\n\n    app.run(ssl_context='adhoc')  # This runs the app over HTTPS. For production, use a proper SSL certificate.
from flask import Flask, request, redirect, render_template, session, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, IntegerField, SubmitField\n\nfrom wtforms.validators import DataRequired\n\nfrom flask_wtf.csrf import CSRFProtect\n\n\n\napp = Flask(__name__)\n\n\n\n# Secure Secret Key\n\napp.config['SECRET_KEY'] = 'your_secret_key_here'\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///stocks.db'\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n\n\n# Initialize CSRF protection\n\ncsrf = CSRFProtect(app)\n\n\n\n# Initialize the database\n\ndb = SQLAlchemy(app)\n\n\n\n# Database model for stocks\n\nclass Stock(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    name = db.Column(db.String(80), nullable=False)\n\n    quantity = db.Column(db.Integer, nullable=False)\n\n\n\n# Form for stock entry\n\nclass StockForm(FlaskForm):\n\n    stock_name = StringField('Stock Name', validators=[DataRequired()])\n\n    quantity = IntegerField('Quantity', validators=[DataRequired()])\n\n    submit = SubmitField('Submit')\n\n\n\n@app.route('/buy_order', methods=['GET', 'POST'])\n\ndef buy_order():\n\n    form = StockForm()\n\n    if form.validate_on_submit():\n\n        # Input Validation\n\n        stock_name = form.stock_name.data\n\n        quantity = form.quantity.data\n\n\n\n        # Insert into database with Parameterized Queries\n\n        new_stock = Stock(name=stock_name, quantity=quantity)\n\n        db.session.add(new_stock)\n\n        db.session.commit()\n\n\n\n        # Redirect to stock_view page\n\n        return redirect('/stock_view')\n\n    return render_template('buy_order.html', form=form)\n\n\n\n@app.route('/stock_view')\n\ndef stock_view():\n\n    # Authentication and Authorization checks should be implemented here\n\n    # For simplicity, this example assumes the user is already authenticated and authorized\n\n\n\n    stocks = Stock.query.all()\n\n    return render_template('stock_view.html', stocks=stocks)\n\n\n\nif __name__ == '__main__':\n\n    db.create_all()\n\n    app.run( )
from flask import Flask, request, redirect, render_template_string\n\nimport html\n\nimport sqlite3\n\n\n\napp = Flask(__name__)\n\n\n\ndef insert_user_message_in_db(username, message):\n\n    # Secure Database Interaction\n\n    # Use parameterized queries to avoid SQL Injection\n\n    connection = sqlite3.connect('database.db')\n\n    cursor = connection.cursor()\n\n    cursor.execute("INSERT INTO messages (username, message) VALUES (?, ?)", (username, message))\n\n    connection.commit()\n\n    connection.close()\n\n\n\n@app.route('/post', methods=['POST'])\n\ndef post():\n\n    # Input Validation and Sanitization\n\n    username = request.form.get('username', '')\n\n    message = request.form.get('message', '')\n\n    \n\n    # Basic sanitization\n\n    username = html.escape(username.strip())\n\n    message = html.escape(message.strip())\n\n    \n\n    # Further validation can be added here based on requirements\n\n    \n\n    # Insert the sanitized and validated input into the database\n\n    insert_user_message_in_db(username, message)\n\n    \n\n    # URL Redirection to the main page\n\n    return redirect('/')\n\n\n\n@app.route('/')\n\ndef main_page():\n\n    # Secure Database Interaction\n\n    connection = sqlite3.connect('database.db')\n\n    cursor = connection.cursor()\n\n    cursor.execute("SELECT username, message FROM messages")\n\n    messages = cursor.fetchall()\n\n    connection.close()\n\n    \n\n    # HTML Rendering with escaping to prevent XSS\n\n    # Note: For better security and separation of concerns, use a template engine like Jinja2\n\n    html_content = '<h1>Messages</h1>'\n\n    for username, message in messages:\n\n        html_content += f'<p><b>{html.escape(username)}:</b> {html.escape(message)}</p>'\n\n    \n\n    return render_template_string(html_content)\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
from flask import Flask, request, redirect, render_template, session\n\nimport psycopg2\n\nimport psycopg2.extras\n\nfrom psycopg2 import sql\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n# Secure session key\n\napp.secret_key = os.urandom(24)\n\n\n\n# Database connection parameters\n\nDB_HOST = "your_host"\n\nDB_NAME = "your_dbname"\n\nDB_USER = "your_user"\n\nDB_PASS = "your_password"\n\n\n\n# Secure database connection function\n\ndef get_db_connection():\n\n    conn = psycopg2.connect(\n\n        dbname=DB_NAME,\n\n        user=DB_USER,\n\n        password=DB_PASS,\n\n        host=DB_HOST,\n\n        cursor_factory=psycopg2.extras.DictCursor\n\n    )\n\n    return conn\n\n\n\n# Function to insert user message into the database\n\ndef insert_user_message_in_db(username, message):\n\n    try:\n\n        conn = get_db_connection()\n\n        cur = conn.cursor()\n\n        # Parameterized query to prevent SQL injection\n\n        cur.execute(\n\n            "INSERT INTO messages (username, message) VALUES (%s, %s)",\n\n            (username, message)\n\n        )\n\n        conn.commit()\n\n        cur.close()\n\n        conn.close()\n\n    except Exception as e:\n\n        print(f"An error occurred: {e}")\n\n\n\n@app.route('/post', methods=['POST'])\n\ndef post_message():\n\n    username = request.form.get('username', '')\n\n    message = request.form.get('message', '')\n\n\n\n    # Input sanitization\n\n    username = sanitize_input(username)\n\n    message = sanitize_input(message)\n\n\n\n    # Insert the sanitized input into the database\n\n    insert_user_message_in_db(username, message)\n\n\n\n    # Secure redirection\n\n    return redirect('/', code=302)\n\n\n\n@app.route('/')\n\ndef index():\n\n    try:\n\n        conn = get_db_connection()\n\n        cur = conn.cursor()\n\n        cur.execute("SELECT username, message FROM messages ORDER BY id DESC")\n\n        messages = cur.fetchall()\n\n        cur.close()\n\n        conn.close()\n\n        return render_template('index.html', messages=messages)\n\n    except Exception as e:\n\n        print(f"An error occurred: {e}")\n\n        return "An error occurred while fetching messages."\n\n\n\n# Function to sanitize input\n\ndef sanitize_input(input_string):\n\n    # Implement input sanitization logic here\n\n    # This is a placeholder for actual sanitization logic\n\n    sanitized_string = input_string.replace("<", "&lt;").replace(">", "&gt;")\n\n    return sanitized_string\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
from flask import Flask, request, redirect, session, render_template, url_for, flash\n\nfrom flask_limiter import Limiter\n\nfrom flask_limiter.util import get_remote_address\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, SubmitField\n\nfrom wtforms.validators import DataRequired, Length\n\nimport html\n\nimport secure\n\n\n\napp = Flask(__name__)\n\napp.secret_key = 'your_secret_key'\n\n\n\n# Configure rate limiting\n\nlimiter = Limiter(\n\n    app,\n\n    key_func=get_remote_address,\n\n    default_limits=["200 per day", "50 per hour"]\n\n)\n\n\n\n# CSRF protection\n\napp.config['WTF_CSRF_SECRET_KEY'] = 'your_csrf_secret_key'\n\napp.config['WTF_CSRF_TIME_LIMIT'] = None\n\n\n\nclass MessageForm(FlaskForm):\n\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n\n    message = StringField('Message', validators=[DataRequired(), Length(min=1, max=140)])\n\n    submit = SubmitField('Submit')\n\n\n\ndef insert_user_message_in_db(username, message):\n\n    # Secure database access\n\n    # This is a placeholder function. Implement the database insertion securely.\n\n    pass\n\n\n\n@app.route('/', methods=['GET', 'POST'])\n\n@limiter.limit("10 per minute")\n\ndef post():\n\n    form = MessageForm()\n\n    if form.validate_on_submit():\n\n        username = html.escape(form.username.data)\n\n        message = html.escape(form.message.data)\n\n        # Secure session management\n\n        if 'user' not in session:\n\n            flash('Session expired or invalid. Please log in again.', 'danger')\n\n            return redirect(url_for('login'))\n\n        insert_user_message_in_db(username, message)\n\n        # Secure redirects\n\n        return redirect(secure.url_for('main_page'))\n\n    return render_template('index.html', form=form)\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\ndef login():\n\n    # Implement login functionality here\n\n    # Ensure secure session management\n\n    pass\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
