import os\n\n\n\ndef read_file_from_safe_dir(file_name):\n\n    """\n\n    Reads a file from the /safe/ directory with input validation, error handling,\n\n    directory restriction, and resource cleanup.\n\n    """\n\n    # Define the safe directory path\n\n    safe_dir = "/safe/"\n\n    \n\n    try:\n\n        # Input Validation: Check if the file name is a string and not empty\n\n        if not isinstance(file_name, str) or not file_name:\n\n            raise ValueError("File name must be a non-empty string.")\n\n        \n\n        # Directory Restriction: Ensure the file path is within the /safe/ directory\n\n        full_path = os.path.abspath(os.path.join(safe_dir, file_name))\n\n        if not full_path.startswith(os.path.abspath(safe_dir)):\n\n            raise ValueError("Access to the specified file is forbidden.")\n\n        \n\n        # Attempt to open the file\n\n        with open(full_path, 'r') as file:\n\n            # Read the file content\n\n            content = file.read()\n\n            return content\n\n    except FileNotFoundError:\n\n        print("The specified file does not exist.")\n\n    except ValueError as ve:\n\n        print(f"Error: {ve}")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n    finally:\n\n        # Resource Cleanup: The 'with' statement automatically closes the file.\n\n        print("File reading operation completed.")\n\n\n\n# Example usage\n\nfile_content = read_file_from_safe_dir("example.txt")\n\nif file_content is not None:\n\n    print(file_content)
import os\n\n\n\ndef read_file_securely(filename):\n\n    # Define the safe base directory\n\n    safe_base_path = "/safe/"\n\n    \n\n    # Validate the filename to avoid directory traversal attacks\n\n    if not os.path.basename(filename) == filename:\n\n        raise ValueError("Invalid filename. Directory traversal is not allowed.")\n\n    \n\n    # Construct the full path and ensure it's within the safe directory\n\n    full_path = os.path.abspath(os.path.join(safe_base_path, filename))\n\n    if not full_path.startswith(os.path.abspath(safe_base_path)):\n\n        raise ValueError("Access denied. File is outside the allowed directory.")\n\n    \n\n    try:\n\n        # Open the file in read-only mode to avoid unintended modifications\n\n        with open(full_path, 'r', encoding='utf-8') as file:\n\n            content = file.read()\n\n            return content\n\n    except FileNotFoundError:\n\n        # Handle file not found error without revealing the path or existence\n\n        raise FileNotFoundError("Requested file is not available.")\n\n    except Exception as e:\n\n        # Generic exception handling to avoid information leaks\n\n        raise Exception("An error occurred while reading the file.") from e
import os\n\n\n\ndef safe_file_read(file_path, safe_dir):\n\n    """\n\n    Reads the content of a file within a safe directory securely.\n\n    Prevents directory traversal and ensures the file is within the specified safe directory.\n\n\n\n    Parameters:\n\n    - file_path: The path to the file to be read.\n\n    - safe_dir: The directory considered safe to read files from.\n\n\n\n    Returns:\n\n    - The content of the file if it's within the safe directory and exists.\n\n    - None, if the file is outside the safe directory or an error occurs.\n\n    """\n\n\n\n    # Normalize the paths to prevent directory traversal\n\n    safe_dir = os.path.normpath(safe_dir)\n\n    full_path = os.path.normpath(os.path.join(safe_dir, file_path))\n\n\n\n    # Check if the file is within the safe directory\n\n    if not full_path.startswith(safe_dir):\n\n        print("Access denied: Attempt to access a file outside the safe directory.")\n\n        return None\n\n\n\n    # Attempt to read the file\n\n    try:\n\n        with open(full_path, 'r', encoding='utf-8') as file:\n\n            return file.read()\n\n    except FileNotFoundError:\n\n        print("Error: The file does not exist.")\n\n    except PermissionError:\n\n        print("Error: Permission denied.")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n\n\n    return None\n\n\n\n# Example usage\n\nsafe_dir = "/path/to/safe/directory"\n\nfile_path = input("Enter the relative path of the file to read: ").strip()\n\ncontent = safe_file_read(file_path, safe_dir)\n\nif content is not None:\n\n    print("File content:")\n\n    print(content)\n\nelse:\n\n    print("Failed to read the file.")
from flask import Flask, send_file, abort\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\ndef validate_image(f):\n\n    def wrapper(name):\n\n        # Input sanitization to ensure the filename is secure\n\n        name = os.path.basename(name)\n\n        # File type validation to ensure it's an image\n\n        if not name.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n\n            abort(400, description="Unsupported file type.")\n\n        image_path = os.path.join('images', name)\n\n        # Error handling if the file does not exist\n\n        if not os.path.isfile(image_path):\n\n            abort(404, description="Image not found.")\n\n        return f(image_path)\n\n    return wrapper\n\n\n\n@app.route('/img/<name>')\n\n@validate_image\n\ndef img(name):\n\n    return send_file(name)\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
from flask import Flask, send_from_directory, abort\n\nimport os\n\nfrom werkzeug.utils import secure_filename\n\n\n\napp = Flask(__name__)\n\n\n\n# Define the base directory for images\n\nIMAGES_DIR = os.path.join(app.root_path, 'images')\n\n\n\n@app.route('/images/<filename>')\n\ndef serve_image(filename):\n\n    try:\n\n        # Secure the filename to prevent directory traversal\n\n        secure_name = secure_filename(filename)\n\n        # Check if the file exists to prevent unauthorized access\n\n        if not os.path.exists(os.path.join(IMAGES_DIR, secure_name)):\n\n            # If the file does not exist, return a 404 error\n\n            abort(404)\n\n        # Serve the file from the images directory\n\n        return send_from_directory(IMAGES_DIR, secure_name)\n\n    except Exception as e:\n\n        # Log the error or handle it as needed\n\n        print(f"An error occurred: {e}")\n\n        # Return a generic error message to the user\n\n        abort(500)\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
from flask import Flask, request, send_file, abort\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n@app.route('/img')\n\ndef img():\n\n    # Input Validation\n\n    file_name = request.args.get('file')\n\n    if not file_name:\n\n        return abort(400, description="No file specified")\n\n\n\n    # Secure File Path\n\n    # Ensure the file path is within a specific directory to prevent directory traversal attacks\n\n    base_directory = os.path.abspath("/path/to/your/images")\n\n    secure_path = os.path.join(base_directory, file_name)\n\n    secure_path = os.path.abspath(secure_path)\n\n\n\n    if not secure_path.startswith(base_directory):\n\n        return abort(403, description="Access denied")\n\n\n\n    # Error Handling\n\n    try:\n\n        # File Contents Retrieval\n\n        if os.path.exists(secure_path) and os.path.isfile(secure_path):\n\n            # Response Handling\n\n            return send_file(secure_path, as_attachment=True)\n\n        else:\n\n            return abort(404, description="File not found")\n\n    except Exception as e:\n\n        return abort(500, description=str(e))\n\n\n\nif __name__ == '__main__':\n\n    app.run( )
import tarfile\n\nimport os\n\n\n\ndef unpack_archive(archive_path, extract_path="/tmp/unpack"):\n\n    # Secure File Handling\n\n    if not os.path.isfile(archive_path):\n\n        print("Error: The archive path provided does not exist or is not a file.")\n\n        return False\n\n\n\n    # Input Validation\n\n    if not archive_path.endswith('.zip'):\n\n        print("Error: The archive format is not supported. Please provide a .zip file.")\n\n        return False\n\n\n\n    try:\n\n        # Ensure the extract_path directory exists\n\n        os.makedirs(extract_path, exist_ok=True)\n\n\n\n        # Using tarfile to open and extract .zip files\n\n        with tarfile.open(archive_path, 'r:gz') as archive:\n\n            archive.extractall(path=extract_path)\n\n        print(f"Archive extracted successfully to {extract_path}")\n\n        return True\n\n    except tarfile.TarError as e:\n\n        print(f"Error extracting the archive: {e}")\n\n        return False\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n        return False\n\n\n\n# Example usage\n\narchive_path = "archive.zip"\n\nif unpack_archive(archive_path):\n\n    print("Unpacking completed successfully.")\n\nelse:\n\n    print("Unpacking failed.")
import tarfile\n\nimport tempfile\n\nimport os\n\nimport shutil\n\n\n\ndef extract_tarfile_to_temp_directory(archive_path):\n\n    # Step 1: Validate the archive file\n\n    if not os.path.isfile(archive_path):\n\n        raise FileNotFoundError(f"The archive file {archive_path} does not exist.")\n\n    if not tarfile.is_tarfile(archive_path):\n\n        raise ValueError(f"The file {archive_path} is not a valid tar archive.")\n\n\n\n    # Step 2: Use a temporary directory for extraction\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n\n        try:\n\n            # Step 3: Open the tarfile and extract it to the temporary directory\n\n            with tarfile.open(archive_path, "r") as tar:\n\n                tar.extractall(path=temp_dir)\n\n                print(f"Successfully extracted {archive_path} to {temp_dir}")\n\n\n\n            # Step 4: Move extracted files to the target directory (/tmp/unpack)\n\n            target_dir = "/tmp/unpack"\n\n            if not os.path.exists(target_dir):\n\n                os.makedirs(target_dir)\n\n            for file_name in os.listdir(temp_dir):\n\n                shutil.move(os.path.join(temp_dir, file_name), target_dir)\n\n            print(f"All files have been moved to {target_dir}")\n\n\n\n        except Exception as e:\n\n            # Handle errors during extraction and moving\n\n            print(f"An error occurred: {e}")\n\n\n\n        finally:\n\n            # Step 5: Cleanup is handled by the TemporaryDirectory context manager automatically\n\n\n\nif __name__ == "__main__":\n\n    archive_path = "archive.zip"\n\n    extract_tarfile_to_temp_directory(archive_path)
import os\n\nimport tarfile\n\nfrom contextlib import ExitStack\n\n\n\ndef is_safe_path(base_path, path, follow_symlinks=True):\n\n    """\n\n    Ensure the path is within the base_path directory.\n\n    """\n\n    if follow_symlinks:\n\n        return os.path.realpath(path).startswith(os.path.realpath(base_path))\n\n    else:\n\n        return os.path.abspath(path).startswith(os.path.abspath(base_path))\n\n\n\ndef extract_tarfile_safe(tar_path, extract_path='./extracted', follow_symlinks=True):\n\n    """\n\n    Extracts a tar file ensuring that the contents are extracted to a designated directory without\n\n    escaping the base directory using path traversal vulnerabilities.\n\n    """\n\n    if not is_safe_path(os.getcwd(), tar_path, follow_symlinks):\n\n        raise ValueError("Unsafe tar file path provided.")\n\n\n\n    if not os.path.exists(extract_path):\n\n        os.makedirs(extract_path, exist_ok=True)\n\n\n\n    with ExitStack() as stack:\n\n        tar = stack.enter_context(tarfile.open(tar_path, 'r:*'))\n\n        for member in tar.getmembers():\n\n            member_path = os.path.join(extract_path, member.name)\n\n            if is_safe_path(extract_path, member_path, follow_symlinks):\n\n                tar.extract(member, path=extract_path)\n\n            else:\n\n                raise ValueError(f"Attempt to extract file outside of target directory: {member.name}")\n\n\n\ndef read_or_write_file(file_path, mode='r', content=None):\n\n    """\n\n    Opens a file to read or write to it, ensuring the file path is safe and does not lead outside\n\n    of the intended directory.\n\n    """\n\n    if not is_safe_path(os.getcwd(), file_path):\n\n        raise ValueError("Unsafe file path provided.")\n\n\n\n    try:\n\n        with open(file_path, mode) as file:\n\n            if mode == 'r':\n\n                return file.read()\n\n            elif mode in ['w', 'a']:\n\n                if content is not None:\n\n                    file.write(content)\n\n                else:\n\n                    raise ValueError("Content must be provided for writing.")\n\n    except IOError as e:\n\n        print(f"An error occurred while accessing the file: {e}")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n\n\n# Example usage\n\nif __name__ == "__main__":\n\n    try:\n\n        # Extract tar file safely\n\n        extract_tarfile_safe('example.tar.gz', './safe_extraction')\n\n\n\n        # Read from a file\n\n        content = read_or_write_file('./safe_extraction/readme.txt', 'r')\n\n        print(content)\n\n\n\n        # Write to a file\n\n        read_or_write_file('./safe_extraction/output.txt', 'w', 'This is a secure file write operation.')\n\n    except ValueError as e:\n\n        print(f"Validation error: {e}")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")
