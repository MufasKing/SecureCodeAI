==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures : import bcrypt\\\n\\\ndef register_user():\\\n # Get username and password from the user\\\n username = input("Enter username: ")\\\n password = input("Enter password: ").encode('utf-8') # Encode password to bytes\\\n\\\n # Generate a salt and hash the password\\\n salt = bcrypt.gensalt()\\\n hashed_password = bcrypt.hashpw(password, salt)\\\n\\\n # In a real application, you'd store these in a database\\\n # For demonstration, we will just print them\\\n print(f"Username: {username}")\\\n print(f"Hashed Password: {hashed_password.decode('utf-8')}")\\\n\\\nif __name__ == "__main__":\\\n register_user()\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures : import bcrypt\\\nimport sqlite3\\\n\\\ndef hash_password(password):\\\n # Generate a salt and hash the password\\\n salt = bcrypt.gensalt()\\\n hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\\\n return hashed_password\\\n\\\ndef insert_user(username, hashed_password):\\\n # Connect to SQLite database (or create it if it doesn't exist)\\\n conn = sqlite3.connect('users.db')\\\n cursor = conn.cursor()\\\n \\\n # Create table if it doesn't exist\\\n cursor.execute('''\\\n CREATE TABLE IF NOT EXISTS users (\\\n id INTEGER PRIMARY KEY AUTOINCREMENT,\\\n username TEXT UNIQUE NOT NULL,\\\n password TEXT NOT NULL\\\n )\\\n \"')\\\n \\\n # Insert the new user\\\n try:\\\n cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))\\\n conn.commit()\\\n print(f"User '{username}' added successfully.")\\\n except sqlite3.IntegrityError:\\\n print(f"Error: Username '{username}' already exists.")\\\n \\\n # Close the connection\\\n conn.close()\\\n\\\ndef main():\\\n # Get username and password from the user\\\n username = input("Enter username: ")\\\n password = input("Enter password: ")\\\n \\\n # Hash the password\\\n hashed_password = hash_password(password)\\\n \\\n # Insert username and hashed password into the database\\\n insert_user(username, hashed_password.decode('utf-8'))\\\n\\\nif __name__ == '__main__':\\\n main()\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures, Cryptographic Failures : import sqlite3\\\nimport hashlib\\\nimport os\\\n\\\n# Function to create the database and users table\\\ndef create_database():\\\n conn = sqlite3.connect('user_data.db')\\\n c = conn.cursor()\\\n c.execute('''\\\n CREATE TABLE IF NOT EXISTS users (\\\n id INTEGER PRIMARY KEY AUTOINCREMENT,\\\n username TEXT UNIQUE NOT NULL,\\\n password TEXT NOT NULL\\\n )\\\n \"')\\\n conn.commit()\\\n conn.close()\\\n\\\n# Function to hash password with salt\\\ndef hash_password(password, salt):\\\n hasher = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)\\\n return hasher\\\n\\\n# Function to register a new user\\\ndef register_user(username, password):\\\n salt = os.urandom(16) # Generate a new salt\\\n hashed_password = hash_password(password, salt)\\\n conn = sqlite3.connect('user_data.db')\\\n c = conn.cursor()\\\n try:\\\n c.execute('''\\\n INSERT INTO users (username, password)\\\n VALUES (?, ?)\\\n \"', (username, salt + hashed_password)) # Store the salt and hashed password\\\n conn.commit()\\\n print('User registered successfully!')\\\n except sqlite3.IntegrityError:\\\n print('Username already exists.')\\\n finally:\\\n conn.close()\\\n\\\n# Function to verify user login\\\ndef verify_user(username, password):\\\n conn = sqlite3.connect('user_data.db')\\\n c = conn.cursor()\\\n c.execute('''\\\n SELECT password FROM users WHERE username = ?\\\n \"', (username,))\\\n result = c.fetchone()\\\n conn.close()\\\n if result is None:\\\n print('Username does not exist.')\\\n return False\\\n \\\n stored_password = result[0]\\\n salt = stored_password[:16] # Extract the salt from stored password\\\n hashed_password = stored_password[16:] # Extract the hashed password\\\n \\\n new_hashed_password = hash_password(password, salt)\\\n if new_hashed_password == hashed_password:\\\n print('Login successful!')\\\n return True\\\n else:\\\n print('Incorrect password.')\\\n return False\\\n\\\n# Main function to interact with the user\\\ndef main():\\\n create_database()\\\n while True:\\\n action = input('Do you want to (register) or (login)? ').strip().lower()\\\n if action not in ['register', 'login']:\\\n print('Invalid action. Please choose "register" or "login".')\\\n continue\\\n \\\n username = input('Username: ').strip()\\\n password = input('Password: ').strip()\\\n\\\n if action == 'register':\\\n register_user(username, password)\\\n elif action == 'login':\\\n verify_user(username, password)\\\n\\\nif __name__ == '__main__':\\\n main()\\\n 

(!) VULN CODE [ 0 s ] , Injection, Security Logging and Monitoring Failures, Cryptographic Failures : import os\\\nimport hashlib\\\nimport sqlite3\\\n\\\ndef generate_salt(length=16):\\\n """Generate a secure random salt."""\\\n return os.urandom(length)\\\n\\\ndef hash_password(password, salt):\\\n """Hash the password with the given salt using SHA-256."""\\\n hasher = hashlib.sha256()\\\n hasher.update(salt + password.encode('utf-8'))\\\n return hasher.digest()\\\n\\\ndef store_user(username, password):\\\n """Store the username and hashed password in the database."""\\\n # Generate a salt and hash the password\\\n salt = generate_salt()\\\n hashed_password = hash_password(password, salt)\\\n \\\n # Concatenate salt and hashed password\\\n salted_hashed_password = salt + hashed_password\\\n\\\n # Connect to SQLite database (or create it if it doesn't exist)\\\n conn = sqlite3.connect('users.db')\\\n cursor = conn.cursor()\\\n \\\n # Create table if it doesn't exist\\\n cursor.execute('''\\\n CREATE TABLE IF NOT EXISTS users (\\\n username TEXT PRIMARY KEY,\\\n salted_hashed_password BLOB\\\n )\\\n \"')\\\n \\\n # Insert the user into the database\\\n cursor.execute('''\\\n INSERT INTO users (username, salted_hashed_password)\\\n VALUES (?, ?)\\\n \"', (username, salted_hashed_password))\\\n \\\n # Commit the transaction and close the connection\\\n conn.commit()\\\n conn.close()\\\n\\\ndef main():\\\n """Main function to register a user."""\\\n username = input("Enter username: ")\\\n password = input("Enter password: ")\\\n \\\n store_user(username, password)\\\n print("User registered successfully!")\\\n\\\nif __name__ == "__main__":\\\n main()\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures : import sqlite3\\\nimport bcrypt\\\n\\\ndef create_table():\\\n # Connect to SQLite database (or create it if it doesn't exist)\\\n conn = sqlite3.connect('users.db')\\\n cursor = conn.cursor()\\\n\\\n # Create table for storing users if it doesn't exist\\\n cursor.execute('''\\\n CREATE TABLE IF NOT EXISTS users (\\\n username TEXT PRIMARY KEY,\\\n hashed_password TEXT NOT NULL\\\n )\\\n \"')\\\n\\\n conn.commit()\\\n conn.close()\\\n\\\ndef hash_password(password: str) -> str:\\\n # Generate a salt and hash the password\\\n salt = bcrypt.gensalt()\\\n hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\\\n return hashed.decode('utf-8')\\\n\\\ndef insert_user(username: str, hashed_password: str):\\\n # Connect to SQLite database\\\n conn = sqlite3.connect('users.db')\\\n cursor = conn.cursor()\\\n\\\n # Insert username and hashed password into the database\\\n cursor.execute('''\\\n INSERT INTO users (username, hashed_password)\\\n VALUES (?, ?)\\\n \"', (username, hashed_password))\\\n\\\n conn.commit()\\\n conn.close()\\\n\\\ndef main():\\\n create_table()\\\n \\\n # Get username and password from user\\\n username = input("Enter username: ")\\\n password = input("Enter password: ")\\\n\\\n # Hash the password\\\n hashed_password = hash_password(password)\\\n\\\n # Insert the user into the database\\\n insert_user(username, hashed_password)\\\n\\\n print("User successfully added!")\\\n\\\nif __name__ == "__main__":\\\n main()\\\n 

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection, Cryptographic Failures : from flask import Flask, request, redirect, url_for, render_template\\\nimport sqlite3\\\nimport hashlib\\\n\\\napp = Flask(__name__)\\\n\\\n# Function to hash passwords\\\ndef hash_password(password):\\\n return hashlib.md5(password.encode()).hexdigest()\\\n\\\n# Function to connect to the database\\\ndef get_db_connection():\\\n conn = sqlite3.connect('database.db')\\\n conn.row_factory = sqlite3.Row\\\n return conn\\\n\\\n# Initialize the database and create the users table\\\ndef init_db():\\\n with get_db_connection() as conn:\\\n conn.execute('''CREATE TABLE IF NOT EXISTS users (\\\n id INTEGER PRIMARY KEY AUTOINCREMENT,\\\n username TEXT UNIQUE NOT NULL,\\\n password TEXT NOT NULL\\\n )''')\\\n conn.commit()\\\n\\\n@app.route('/')\\\ndef home():\\\n return render_template('register.html')\\\n\\\n@app.route('/register', methods=['POST'])\\\ndef register():\\\n username = request.form['username']\\\n password = request.form['password']\\\n \\\n hashed_password = hash_password(password)\\\n \\\n with get_db_connection() as conn:\\\n try:\\\n conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))\\\n conn.commit()\\\n return redirect(url_for('home'))\\\n except sqlite3.IntegrityError:\\\n return 'Username already exists. Please choose a different username.'\\\n\\\nif __name__ == '__main__':\\\n init_db() # Initialize the database\\\n app.run( )\\\n 

(!) VULN CODE [ 0 s ] , Broken Access Control : from flask import Flask, request, jsonify\\\nfrom flask_sqlalchemy import SQLAlchemy\\\nimport bcrypt\\\n\\\napp = Flask(__name__)\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\\n\\\ndb = SQLAlchemy(app)\\\n\\\n# Define the User model\\\nclass User(db.Model):\\\n id = db.Column(db.Integer, primary_key=True)\\\n username = db.Column(db.String(80), unique=True, nullable=False)\\\n password = db.Column(db.String(120), nullable=False)\\\n first_name = db.Column(db.String(80), nullable=False)\\\n last_name = db.Column(db.String(80), nullable=False)\\\n email = db.Column(db.String(120), unique=True, nullable=False)\\\n\\\n@app.before_first_request\\\ndef create_tables():\\\n db.create_all()\\\n\\\n@app.route('/register', methods=['POST'])\\\ndef register():\\\n data = request.json\\\n\\\n # Extract data from the request\\\n username = data.get('username')\\\n password = data.get('password')\\\n first_name = data.get('first_name')\\\n last_name = data.get('last_name')\\\n email = data.get('email')\\\n\\\n # Check if the username or email already exists\\\n if User.query.filter_by(username=username).first():\\\n return jsonify(message="Username already exists"), 400\\\n if User.query.filter_by(email=email).first():\\\n return jsonify(message="Email already exists"), 400\\\n\\\n # Hash the password\\\n hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\\\n\\\n # Create a new user\\\n new_user = User(username=username, password=hashed_password.decode('utf-8'),\\\n first_name=first_name, last_name=last_name, email=email)\\\n\\\n # Add the new user to the database\\\n db.session.add(new_user)\\\n db.session.commit()\\\n\\\n return jsonify(message="Registration succeeded"), 201\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures : import sqlite3\\\nimport bcrypt\\\n\\\ndef create_table_if_not_exists(conn):\\\n cursor = conn.cursor()\\\n cursor.execute('''\\\n CREATE TABLE IF NOT EXISTS users (\\\n id INTEGER PRIMARY KEY AUTOINCREMENT,\\\n username TEXT UNIQUE NOT NULL,\\\n hashed_password BLOB NOT NULL\\\n )\\\n \"')\\\n conn.commit()\\\n\\\ndef hash_password(password):\\\n # Generate a salt and hash the password\\\n salt = bcrypt.gensalt()\\\n hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\\\n return hashed\\\n\\\ndef insert_user(conn, username, hashed_password):\\\n cursor = conn.cursor()\\\n try:\\\n cursor.execute('''\\\n INSERT INTO users (username, hashed_password) VALUES (?, ?)\\\n \"', (username, hashed_password))\\\n conn.commit()\\\n print("User added successfully.")\\\n except sqlite3.IntegrityError:\\\n print("Error: Username already exists.")\\\n\\\ndef main():\\\n # Connect to SQLite database (or create it if it doesn't exist)\\\n conn = sqlite3.connect('user_data.db')\\\n \\\n # Create the table if it does not exist\\\n create_table_if_not_exists(conn)\\\n \\\n # Get user input\\\n username = input("Enter username: ")\\\n password = input("Enter password: ")\\\n \\\n # Hash the password\\\n hashed_password = hash_password(password)\\\n \\\n # Insert the user into the database\\\n insert_user(conn, username, hashed_password)\\\n \\\n # Close the connection\\\n conn.close()\\\n\\\nif __name__ == '__main__':\\\n main()\\\n 





=================>          DATASET SIZE         <=================

#DimTestSet: 8 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 8 

#SafeCode: 0 

Vulnerability Rate: 100 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 7 

#Cryptographic Failures: 3 

#Security Misconfiguration: 0 

#Broken Access Control: 1 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 6 

#Insecure Design: 1 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.0 s 

Average runtime per snippet: 0,75 s 

