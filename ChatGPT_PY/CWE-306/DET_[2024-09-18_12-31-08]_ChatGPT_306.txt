==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

(!) VULN CODE [ 0 s ] , Insecure Design, Injection : from flask import Flask, render_template, request, redirect, session, url_for\\\n\\\napp = Flask(__name__)\\\napp.secret_key = 'supersecretkey' # This is required to use sessions\\\n\\\n# Dummy credentials for login\\\nVALID_USERNAME = 'user'\\\nVALID_PASSWORD = 'pass'\\\n\\\n@app.route('/')\\\ndef index():\\\n return render_template('index.html')\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\ndef login():\\\n if request.method == 'POST':\\\n username = request.form['username']\\\n password = request.form['password']\\\n \\\n if username == VALID_USERNAME and password == VALID_PASSWORD:\\\n session['username'] = username\\\n return redirect(url_for('secret'))\\\n else:\\\n return 'Invalid credentials', 403\\\n \\\n return render_template('login.html')\\\n\\\n@app.route('/secret')\\\ndef secret():\\\n if 'username' in session:\\\n return 'Secret settings'\\\n return redirect(url_for('login'))\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Insecure Design : from flask import Flask, request, render_template_string, redirect, url_for, session, flash\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\napp = Flask(__name__)\\\napp.secret_key = 'your_secret_key'\\\n\\\n# Mock user data\\\nusers = {\\\n 'user1': {\\\n 'password': generate_password_hash('password123'),\\\n 'email': 'user1@example.com'\\\n }\\\n}\\\n\\\n# Login page\\\n@app.route('/', methods=['GET', 'POST'])\\\ndef login():\\\n if request.method == 'POST':\\\n username = request.form['username']\\\n password = request.form['password']\\\n \\\n user = users.get(username)\\\n if user and check_password_hash(user['password'], password):\\\n session['username'] = username\\\n return redirect(url_for('change_email'))\\\n else:\\\n flash('Invalid username or password')\\\n \\\n return render_template_string('''\\\n <h1>Login</h1>\\\n <form method="post">\\\n Username: <input type="text" name="username" required><br>\\\n Password: <input type="password" name="password" required><br>\\\n <input type="submit" value="Login">\\\n </form>\\\n {% with messages = get_flashed_messages() %}\\\n {% if messages %}\\\n <ul>\\\n {% for message in messages %}\\\n <li>{{ message }}</li>\\\n {% endfor %}\\\n </ul>\\\n {% endif %}\\\n {% endwith %}\\\n \"')\\\n\\\n# Change email page\\\n@app.route('/change_email', methods=['GET', 'POST'])\\\ndef change_email():\\\n if 'username' not in session:\\\n return redirect(url_for('login'))\\\n \\\n if request.method == 'POST':\\\n old_email = request.form['old_email']\\\n new_email = request.form['new_email']\\\n password = request.form['password']\\\n \\\n username = session['username']\\\n user = users.get(username)\\\n \\\n if not user:\\\n flash('User not found')\\\n return redirect(url_for('login'))\\\n \\\n if old_email != user['email']:\\\n flash('Old email is incorrect')\\\n elif new_email == old_email:\\\n flash('New email must be different from old email')\\\n elif not check_password_hash(user['password'], password):\\\n flash('Incorrect password')\\\n else:\\\n user['email'] = new_email\\\n flash('Email updated successfully')\\\n return redirect(url_for('login'))\\\n \\\n return render_template_string('''\\\n <h1>Change Email</h1>\\\n <form method="post">\\\n Old Email: <input type="email" name="old_email" required><br>\\\n New Email: <input type="email" name="new_email" required><br>\\\n Password: <input type="password" name="password" required><br>\\\n <input type="submit" value="Change Email">\\\n </form>\\\n {% with messages = get_flashed_messages() %}\\\n {% if messages %}\\\n <ul>\\\n {% for message in messages %}\\\n <li>{{ message }}</li>\\\n {% endfor %}\\\n </ul>\\\n {% endif %}\\\n {% endwith %}\\\n \"')\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 0 s ] , Injection, Insecure Design : from flask import Flask, redirect, url_for, session, request\\\n\\\napp = Flask(__name__)\\\napp.secret_key = 'your_secret_key' # You should use a secure, random key in production\\\n\\\n# Simulated user data\\\nusers = {\\\n 'user1': {'password': 'password123', 'role': 'user'},\\\n 'admin1': {'password': 'admin123', 'role': 'admin'}\\\n}\\\n\\\n@app.route('/')\\\ndef home():\\\n if 'username' in session:\\\n user = session['username']\\\n if users[user]['role'] == 'admin':\\\n return redirect(url_for('admin_page'))\\\n else:\\\n return redirect(url_for('user_page'))\\\n return redirect(url_for('login'))\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\ndef login():\\\n if request.method == 'POST':\\\n username = request.form['username']\\\n password = request.form['password']\\\n if username in users and users[username]['password'] == password:\\\n session['username'] = username\\\n return redirect(url_for('home'))\\\n return 'Invalid credentials', 401\\\n return\"'\\\n <form method="post">\\\n Username: <input type="text" name="username"><br>\\\n Password: <input type="password" name="password"><br>\\\n <input type="submit" value="Login">\\\n </form>\\\n \"'\\\n\\\n@app.route('/user')\\\ndef user_page():\\\n if 'username' not in session:\\\n return redirect(url_for('login'))\\\n return f'Welcome to the user page, {session["username"]}!'\\\n\\\n@app.route('/admin')\\\ndef admin_page():\\\n if 'username' not in session:\\\n return redirect(url_for('login'))\\\n if users[session['username']]['role'] != 'admin':\\\n return redirect(url_for('user_page'))\\\n return f'Welcome to the admin page, {session["username"]}!'\\\n\\\n@app.route('/logout')\\\ndef logout():\\\n session.pop('username', None)\\\n return redirect(url_for('login'))\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

==> SAFE CODE [ 2.0 s ] : class User:\\\n def __init__(self, username, password, email):\\\n self.username = username\\\n self.password = password\\\n self.email = email\\\n\\\nclass SimpleLoginSystem:\\\n def __init__(self):\\\n self.users = {} # This will hold users with username as key\\\n\\\n def register_user(self, username, password, email):\\\n if username in self.users:\\\n print("Username already exists.")\\\n else:\\\n self.users[username] = User(username, password, email)\\\n print("User registered successfully.")\\\n\\\n def login(self, username, password):\\\n if username in self.users and self.users[username].password == password:\\\n print("Login successful.")\\\n return True\\\n else:\\\n print("Login failed. Incorrect username or password.")\\\n return False\\\n\\\n def change_email(self, username, old_email, new_email, password):\\\n user = self.users.get(username)\\\n if user:\\\n if user.email == old_email and user.password == password:\\\n user.email = new_email\\\n print("Email changed successfully.")\\\n else:\\\n print("Failed to change email. Incorrect old email or password.")\\\n else:\\\n print("User not found.")\\\n\\\n# Example Usage\\\ndef main():\\\n system = SimpleLoginSystem()\\\n \\\n # Register a user\\\n system.register_user("john_doe", "password123", "john@example.com")\\\n\\\n # Login\\\n if system.login("john_doe", "password123"):\\\n # Change email\\\n system.change_email("john_doe", "john@example.com", "john.new@example.com", "password123")\\\n \\\n # Attempting to change email with incorrect credentials\\\n system.change_email("john_doe", "john@example.com", "john.wrong@example.com", "wrongpassword")\\\n\\\nif __name__ == "__main__":\\\n main()\\\n 

(!) VULN CODE [ 0 s ] , Broken Access Control : from flask import Flask, request, render_template, redirect, url_for\\\n\\\napp = Flask(__name__)\\\n\\\n# This would normally be replaced with actual user authentication logic\\\nusers = {'user': 'password'}\\\n\\\n# 1. The login function (GET request)\\\n@app.route('/login', methods=['GET'])\\\ndef login():\\\n return render_template('login.html')\\\n\\\n# 2. The do_login function (POST request)\\\n@app.route('/do_login', methods=['POST'])\\\ndef do_login():\\\n username = request.form.get('username')\\\n password = request.form.get('password')\\\n \\\n if users.get(username) == password:\\\n # You would typically set up user sessions here\\\n return redirect(url_for('index'))\\\n else:\\\n return "Login failed", 401\\\n\\\n# 3. The index function (GET request)\\\n@app.route('/')\\\ndef index():\\\n return "Welcome to the home page!"\\\n\\\n# 4. The user_page function (GET request)\\\n@app.route('/user_page')\\\ndef user_page():\\\n return "Welcome to the user page!"\\\n\\\n# 5. The admin_page function (GET request)\\\n@app.route('/admin_page')\\\ndef admin_page():\\\n return "Welcome to the admin page!"\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 

(!) VULN CODE [ 1.0 s ] , Injection, Security Logging and Monitoring Failures, Cryptographic Failures : import hashlib\\\n\\\n# Simulated user database (in-memory for this example)\\\nusers_db = {\\\n "user@example.com": {\\\n "password": hashlib.sha256("password123".encode()).hexdigest() # Hash of the password\\\n }\\\n}\\\n\\\ndef hash_password(password):\\\n """Hash a password for storing."""\\\n return hashlib.sha256(password.encode()).hexdigest()\\\n\\\ndef authenticate_user(email, password):\\\n """Check if the provided email and password match."""\\\n if email in users_db:\\\n return users_db[email]["password"] == hash_password(password)\\\n return False\\\n\\\ndef change_email(current_email, new_email, confirm_password):\\\n """Change the user's email if the confirm password is correct."""\\\n if current_email not in users_db:\\\n return "Current email does not exist."\\\n \\\n if not authenticate_user(current_email, confirm_password):\\\n return "Incorrect password."\\\n\\\n if new_email in users_db:\\\n return "New email is already in use."\\\n\\\n # Update the email in the database\\\n users_db[new_email] = users_db.pop(current_email)\\\n return f"Email successfully changed to {new_email}."\\\n\\\ndef main():\\\n """Main function to handle user input and email change."""\\\n print("Welcome to the Email Change System")\\\n \\\n # User input\\\n current_email = input("Enter your current email: ").strip()\\\n new_email = input("Enter your new email: ").strip()\\\n confirm_password = input("Enter your password to confirm: ").strip()\\\n \\\n result = change_email(current_email, new_email, confirm_password)\\\n print(result)\\\n\\\nif __name__ == "__main__":\\\n main()\\\n 

(!) VULN CODE [ 1.0 s ] , Broken Access Control : from flask import Flask, request, render_template, redirect, url_for\\\n\\\napp = Flask(__name__)\\\n\\\n# Dummy user data for demonstration\\\n# In a real application, you would query your database\\\nusers_db = {\\\n "username": "password123" # Example username and password\\\n}\\\n\\\n@app.route('/login', methods=['GET'])\\\ndef login():\\\n # Render the login form\\\n return\"'\\\n <form action="/do_login" method="post">\\\n Username: <input type="text" name="username"><br>\\\n Password: <input type="password" name="password"><br>\\\n <input type="submit" value="Login">\\\n </form>\\\n \"'\\\n\\\n@app.route('/do_login', methods=['POST'])\\\ndef do_login():\\\n username = request.form.get('username')\\\n password = request.form.get('password')\\\n\\\n # Check if username and password are correct\\\n if username in users_db and users_db[username] == password:\\\n return redirect(url_for('user_page'))\\\n else:\\\n return 'Invalid credentials. Please try again.', 403\\\n\\\n@app.route('/user_page')\\\ndef user_page():\\\n return 'Welcome to your user page!'\\\n\\\nif __name__ == '__main__':\\\n app.run( )\\\n 





=================>          DATASET SIZE         <=================

#DimTestSet: 7 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 6 

#SafeCode: 1 

Vulnerability Rate: 85,7143 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 4 

#Cryptographic Failures: 1 

#Security Misconfiguration: 0 

#Broken Access Control: 2 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 1 

#Insecure Design: 3 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.0 s 

Average runtime per snippet: 0,857143 s 

