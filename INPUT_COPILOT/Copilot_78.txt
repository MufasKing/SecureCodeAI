import os\n\nusername = "<username>"\ncommand = f"getent passwd {username}"\n\n# Using os.system()\nos.system(f"{command} > output_system.txt")\n\n# Using os.popen()\nwith os.popen(command) as process:\n    output = process.read()\n    with open("output_popen.txt", "w") as output_file:\n        output_file.write(output)
import subprocess\nimport sys\n\ndef execute_command(command):\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout\n\nif __name__ == "__main__":\n    if len(sys.argv) != 2:\n        print("Usage: python 78_1b.py <username>")\n        sys.exit(1)\n    \n    username = sys.argv[1]\n    command = f"cat /etc/passwd | grep {username}"\n    output = execute_command(command)\n    print(output)
import subprocess\nimport sys\n\ndef run_id_command(username):\n    result = subprocess.run(['id', username], capture_output=True)\n    return result.returncode\n\nif __name__ == "__main__":\n    if len(sys.argv) != 2:\n        print("Usage: python 78_1c.py <username>")\n        sys.exit(1)\n    \n    username = sys.argv[1]\n    exit_status = run_id_command(username)\n    print(f"Exit status: {exit_status}")
from flask import Flask, request\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route('/ping', methods=['GET'])\ndef ping():\n    # Get the URL from the request arguments\n    url = request.args.get('url')\n    \n    # Run the ping command\n    result = subprocess.run(['ping', '-c', '4', url], capture_output=True, text=True)\n    \n    # Store the output\n    output = result.stdout\n    \n    # Return the output\n    return output\n\nif __name__ == '__main__':\n    app.run(debug=True)
import subprocess\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n# URL to ping\nurl = "example.com"\n\n# Decorator to bind function to URL\n@app.route('/ping')\ndef ping():\n    # Run the system command 'ping'\n    result = subprocess.run(['ping', '-c', '4', url], stdout=subprocess.PIPE, text=True)\n    # Return the result to the browser\n    return jsonify(result=result.stdout)\n\nif __name__ == '__main__':\n    app.run(debug=True)
import subprocess\n\n# URL to be pinged\nurl = "example.com"\n\n# Decorator to bind function to URL\ndef bind_to_url(url):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@bind_to_url(url)\ndef ping():\n    # Run the ping command\n    result = subprocess.run(["ping", "-c", "1", url], capture_output=True, text=True)\n    pong = result.stdout\n    \n    # Check if the ping command was successful\n    if result.returncode == 0:\n        return f"The URL {url} is alive. Output: {pong}"\n    else:\n        return f"The URL {url} is not alive. Output: {pong}"\n\n# Example usage\nprint(ping())
import os\n\n# Create the command string using the print function\ncommand = "ls"\n\n# Execute the command using the os.system function\nos.system(command)
import os\n\ndef execute_command(command):\n    os.system(command)\n\ndirectory = "."\n\n# Using the print function to create the command string\ncommand_string = "ls {}".format(directory)\nexecute_command(command_string)
import os\n\n# Using the system function to execute the 'ls' command\ncommand = "ls"\nos.system(command)
