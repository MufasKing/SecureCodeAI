import re\n\n# Compile the regular expression once when the module is loaded\npattern = re.compile(r'^https://example\.com/.*$')\n\ndef get_redirect_url(target_url):\n    # Check if the target URL matches the regular expression\n    if pattern.match(target_url):\n        return target_url\n    else:\n        # Use a default URL if the target URL does not match\n        return 'https://default.com'\n\n# Example usage\ntarget_url = 'https://example.com/page'\nredirect_url = get_redirect_url(target_url)\nprint(redirect_url)  # Output: https://example.com/page\n\ntarget_url = 'https://other.com/page'\nredirect_url = get_redirect_url(target_url)\nprint(redirect_url)  # Output: https://default.com
from flask import Flask, redirect, request\nimport re\n\napp = Flask(__name__)\n\n@app.route('/redirect')\ndef redirect_to_target():\n    target = request.args.get('target')\n    if target and re.match(r'.*example\.com.*', target):\n        return redirect(target)\n    else:\n        return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)
import re\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    target = request.args.get('target', '')\n    pattern = r'^[\w-]+\.$'\n    \n    if re.match(pattern, target):\n        return redirect(target)\n    else:\n        return redirect('/')\n\nif __name__ == '__main__':\n    app.run()
from urllib.parse import urlparse\n\ndef redirect_url(url):\n    parsed_url = urlparse(url)\n    domain_name = parsed_url.netloc\n    \n    if domain_name == "example.com":\n        return "URL is redirected"\n    else:\n        return "404 Error: Not Found"
from flask import Flask, redirect, request, abort\n\napp = Flask(__name__)\n\n@app.route('/redirect/<path:url>')\ndef redirect_invalid_url(url):\n    if "example.com" in url:\n        return redirect(url)\n    else:\n        return abort(400, description="Invalid URL. Only example.com URLs are allowed.")\n\nif __name__ == '__main__':\n    app.run(debug=True)
from flask import Flask, request, redirect, jsonify\n\napp = Flask(__name__)\n\n@app.route('/redirect_url')\ndef redirect_invalid_url():\n    url = request.args.get('url')\n    if 'example.com' in url:\n        return redirect(url)\n    else:\n        return jsonify({"error": "Invalid URL"}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)
