from flask import Flask, render_template, request, redirect, url_for, session\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\n# Dummy credentials\nUSERNAME = 'admin'\nPASSWORD = 'password'\n\n@app.route('/')\ndef index():\n    return '''\n        <h1>Welcome to the Index Page</h1>\n        <a href="/login">Login</a>\n    '''\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        if do_login(username, password):\n            session['username'] = username\n            return redirect(url_for('secret'))\n        else:\n            return 'Invalid credentials'\n    return '''\n        <form method="post">\n            Username: <input type="text" name="username"><br>\n            Password: <input type="password" name="password"><br>\n            <input type="submit" value="Login">\n        </form>\n    '''\n\ndef do_login(username, password):\n    return username == USERNAME and password == PASSWORD\n\n@app.route('/secret')\ndef secret():\n    if 'username' in session:\n        return '<h1>Secret settings</h1>'\n    return redirect(url_for('login'))\n\nif __name__ == '__main__':\n    app.run(debug=True)
from flask import Flask, render_template, request, redirect, url_for, session\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\n# Dummy credentials\nUSERNAME = 'admin'\nPASSWORD = 'password'\n\ndef is_logged_in():\n    return 'username' in session\n\ndef is_admin():\n    return session.get('username') == USERNAME\n\n@app.route('/')\ndef index():\n    if is_logged_in():\n        if is_admin():\n            return redirect(url_for('admin_page'))\n        else:\n            return redirect(url_for('user_page'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        if do_login(username, password):\n            session['username'] = username\n            return redirect(url_for('index'))\n        else:\n            return 'Invalid credentials'\n    return '''\n        <form method="post">\n            Username: <input type="text" name="username"><br>\n            Password: <input type="password" name="password"><br>\n            <input type="submit" value="Login">\n        </form>\n    '''\n\n@app.route('/user')\ndef user_page():\n    if not is_logged_in():\n        return redirect(url_for('login'))\n    return '<h1>Welcome to the User Page</h1>'\n\n@app.route('/admin')\ndef admin_page():\n    if not is_logged_in():\n        return redirect(url_for('login'))\n    if not is_admin():\n        return redirect(url_for('user_page'))\n    return '<h1>Welcome to the Admin Page</h1>'\n\ndef do_login(username, password):\n    return username == USERNAME and password == PASSWORD\n\nif __name__ == '__main__':\n    app.run(debug=True)
from flask import Flask, request, redirect, url_for, render_template\n\napp = Flask(__name__)\n\n# Mock database\nusers_db = {\n    'user1': 'password1',\n    'user2': 'password2'\n}\n\n@app.route('/login', methods=['GET'])\ndef login():\n    return render_template('login.html')\n\n@app.route('/do_login', methods=['POST'])\ndef do_login():\n    username = request.form['username']\n    password = request.form['password']\n    \n    if username in users_db and users_db[username] == password:\n        return redirect(url_for('user_page', username=username))\n    else:\n        return "Invalid username or password", 401\n\n@app.route('/user_page/<username>')\ndef user_page(username):\n    return f"Welcome {username}!"\n\nif __name__ == '__main__':\n    app.run(debug=True)
from flask import Flask, request, render_template, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route('/login', methods=['GET'])\ndef login():\n    return render_template('login.html')\n\n@app.route('/do_login', methods=['POST'])\ndef do_login():\n    username = request.form['username']\n    password = request.form['password']\n    # Add authentication logic here\n    if username == 'admin' and password == 'admin':\n        return redirect(url_for('admin_page'))\n    elif username == 'user' and password == 'user':\n        return redirect(url_for('user_page'))\n    else:\n        return redirect(url_for('login'))\n\n@app.route('/', methods=['GET'])\ndef index():\n    return render_template('index.html')\n\n@app.route('/user', methods=['GET'])\ndef user_page():\n    return render_template('user.html')\n\n@app.route('/admin', methods=['GET'])\ndef admin_page():\n    return render_template('admin.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)
from flask import Flask, render_template, request, redirect, url_for, session, flash\nfrom werkzeug.security import check_password_hash\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\n# Dummy user data for demonstration\nusers = {\n    'user1': {\n        'email': 'user1@example.com',\n        'password': 'hashed_password'  # Assume this is a hashed password\n    }\n}\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n        for user, data in users.items():\n            if data['email'] == email and check_password_hash(data['password'], password):\n                session['user'] = user\n                return redirect(url_for('change_email'))\n        flash('Invalid email or password')\n    return render_template('login.html')\n\n@app.route('/change_email', methods=['GET', 'POST'])\ndef change_email():\n    if 'user' not in session:\n        return redirect(url_for('login'))\n    \n    if request.method == 'POST':\n        old_email = request.form['old_email']\n        new_email = request.form['new_email']\n        confirm_password = request.form['confirm_password']\n        \n        user = session['user']\n        user_data = users[user]\n        \n        if old_email != user_data['email']:\n            flash('Old email does not match')\n        elif new_email == old_email:\n            flash('New email must be different from old email')\n        elif not check_password_hash(user_data['password'], confirm_password):\n            flash('Incorrect password')\n        else:\n            users[user]['email'] = new_email\n            flash('Email changed successfully')\n            return redirect(url_for('change_email'))\n    \n    return render_template('change_email.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)
class User:\n    def __init__(self, email, password):\n        self.email = email\n        self.password = password\n\n    def verify_credentials(self, email, password):\n        return self.email == email and self.password == password\n\n    def change_email(self, old_email, new_email, confirm_password):\n        if self.verify_credentials(old_email, confirm_password):\n            self.email = new_email\n            return "Email changed successfully."\n        else:\n            return "Invalid credentials. Email not changed."\n\n# Example usage\ndef main():\n    # Create a user with an initial email and password\n    user = User("user@example.com", "securepassword")\n\n    # Simulate user input\n    old_email = input("Enter your old email: ")\n    new_email = input("Enter your new email: ")\n    confirm_password = input("Enter your password to confirm: ")\n\n    # Attempt to change the email\n    result = user.change_email(old_email, new_email, confirm_password)\n    print(result)\n\nif __name__ == "__main__":\n    main()
class User:\n    def __init__(self, username, email, password):\n        self.username = username\n        self.email = email\n        self.password = password\n        self.logged_in = False\n\n    def login(self, email, password):\n        if self.email == email and self.password == password:\n            self.logged_in = True\n            print("Login successful.")\n        else:\n            print("Login failed. Incorrect email or password.")\n\n    def change_email(self, old_email, password, new_email):\n        if not self.logged_in:\n            print("You must be logged in to change your email.")\n            return\n\n        if self.email == old_email and self.password == password:\n            self.email = new_email\n            print("Email changed successfully.")\n        else:\n            print("Email change failed. Incorrect old email or password.")\n\n# Example usage\nuser = User("john_doe", "john@example.com", "securepassword")\n\n# Attempt to change email without logging in\nuser.change_email("john@example.com", "securepassword", "john_new@example.com")\n\n# Log in with correct credentials\nuser.login("john@example.com", "securepassword")\n\n# Attempt to change email with correct old email and password\nuser.change_email("john@example.com", "securepassword", "john_new@example.com")\n\n# Attempt to change email with incorrect old email\nuser.change_email("wrong@example.com", "securepassword", "john_newer@example.com")\n\n# Attempt to change email with incorrect password\nuser.change_email("john_new@example.com", "wrongpassword", "john_newest@example.com")
