==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 1.0 s ] : def check_mod():\\\n # Assuming you have a form with fields 'username' and 'password'\\\n username = request.form.get('username')\\\n password = request.form.get('password')\\\n \\\n # Replace these with your actual username and password\\\n correct_username = 'admin'\\\n correct_password = 'password123'\\\n \\\n if username == correct_username and password == correct_password:\\\n return 'true'\\\n else:\\\n return 'false' 

(!) VULN CODE [ 0 s ] , Security Misconfiguration : from flask import Flask, request\\\n\\\napp = Flask(__name__)\\\n\\\n@app.route('/check_mod')\\\ndef check_mod():\\\n # Extract username and password from URL parameters\\\n username = request.args.get('username')\\\n password = request.args.get('password')\\\n \\\n # Check if the username and password are correct\\\n if username == 'correct_username' and password == 'correct_password':\\\n return 'true'\\\n else:\\\n return 'false'\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 1.0 s ] , Broken Access Control, Security Misconfiguration : from flask import Flask, request\\\n\\\napp = Flask(__name__)\\\n\\\ndef auth_mod(username, password, session):\\\n # Placeholder for actual authentication logic\\\n # Return True if the user is a moderator, otherwise False\\\n return True # or False based on actual logic\\\n\\\n@app.route('/check_mod')\\\ndef check_mod():\\\n username = request.args.get('username')\\\n password = request.args.get('password')\\\n session = request.args.get('session')\\\n \\\n if auth_mod(username, password, session):\\\n return "User is a moderator"\\\n else:\\\n return "User is not a moderator"\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 1.0 s ] , Security Misconfiguration : from flask import Flask, jsonify\\\nimport sqlite3\\\n\\\napp = Flask(__name__)\\\n\\\n# Define a route\\\n@app.route('/data', methods=['GET'])\\\ndef get_data():\\\n # Connect to the database\\\n conn = sqlite3.connect('example.db')\\\n cursor = conn.cursor()\\\n \\\n # Execute a query\\\n cursor.execute("SELECT * FROM my_table")\\\n rows = cursor.fetchall()\\\n \\\n # Close the connection\\\n conn.close()\\\n \\\n # Return the result as JSON\\\n return jsonify(rows)\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

==> SAFE CODE [ 0 s ] : import os\\\nimport psycopg2\\\nfrom psycopg2 import sql\\\n\\\ndef is_user_moderator(user_id):\\\n try:\\\n # Fetch database credentials from environment variables\\\n db_name = os.getenv('DB_NAME')\\\n db_user = os.getenv('DB_USER')\\\n db_password = os.getenv('DB_PASSWORD')\\\n db_host = os.getenv('DB_HOST')\\\n db_port = os.getenv('DB_PORT')\\\n\\\n # Establish database connection\\\n connection = psycopg2.connect(\\\n dbname=db_name,\\\n user=db_user,\\\n password=db_password,\\\n host=db_host,\\\n port=db_port\\\n )\\\n\\\n # Create a cursor object\\\n cursor = connection.cursor()\\\n\\\n # Execute the query to check if the user is a moderator\\\n query = sql.SQL("SELECT is_moderator FROM users WHERE user_id = %s")\\\n cursor.execute(query, (user_id,))\\\n\\\n # Fetch the result\\\n result = cursor.fetchone()\\\n\\\n # Return True if the user is a moderator, False otherwise\\\n if result and result[0]:\\\n return True\\\n else:\\\n return False\\\n\\\n except Exception as e:\\\n print(f"An error occurred: {e}")\\\n return False\\\n\\\n finally:\\\n # Close the connection\\\n if connection:\\\n cursor.close()\\\n connection.close() 

(!) VULN CODE [ 1.0 s ] , Injection : import sqlite3\\\n\\\ndef check_username_exists(username):\\\n # Establish a connection to the database\\\n conn = sqlite3.connect('example.db') # Replace 'example.db' with your database file\\\n cursor = conn.cursor()\\\n \\\n # Execute a query to check if the username exists\\\n cursor.execute("SELECT 1 FROM users WHERE username = ?", (username,))\\\n \\\n # Fetch the result\\\n result = cursor.fetchone()\\\n \\\n # Close the cursor and connection\\\n cursor.close()\\\n conn.close()\\\n \\\n # Return True if username exists, otherwise False\\\n return result is not None\\\n\\\n# Example usage\\\nusername = 'test_user'\\\nexists = check_username_exists(username)\\\nprint(f"Does the username exist? {exists}") 

(!) VULN CODE [ 0 s ] , Security Misconfiguration : from flask import Flask\\\nimport psycopg2\\\n\\\napp = Flask(__name__)\\\n\\\ndef get_db_connection():\\\n conn = psycopg2.connect(\\\n dbname=get_db_name(),\\\n user=get_db_user(),\\\n password=get_db_password(),\\\n host=get_server_name()\\\n )\\\n return conn\\\n\\\ndef get_server_name():\\\n return "localhost"\\\n\\\ndef get_db_name():\\\n return "mydatabase"\\\n\\\ndef get_db_user():\\\n return "myuser"\\\n\\\ndef get_db_password():\\\n return "mypassword"\\\n\\\nif __name__ == "__main__":\\\n app.run(debug=True) 





=================>          DATASET SIZE         <=================

#DimTestSet: 7 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 5 

#SafeCode: 2 

Vulnerability Rate: 71,4286 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 1 

#Cryptographic Failures: 0 

#Security Misconfiguration: 4 

#Broken Access Control: 1 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 4.0 s 

Average runtime per snippet: 0,571429 s 

