==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0 s ] : import sys\\\n\\\nif len(sys.argv) != 2:\\\n print("Usage: python 190_1a.py <number>")\\\n sys.exit(1)\\\n\\\ntry:\\\n value = int(sys.argv[1])\\\n result = value + 1000\\\n print(f"Result: {result}")\\\nexcept ValueError:\\\n print("Please provide a valid integer.") 

==> SAFE CODE [ 0 s ] : import sys\\\n\\\n# Define the offset constant\\\nOFFSET = 1000\\\n\\\ndef main():\\\n if len(sys.argv) != 2:\\\n print("Usage: python 190_1b.py <number>")\\\n sys.exit(1)\\\n \\\n try:\\\n # Read the value from the command line\\\n value = int(sys.argv[1])\\\n except ValueError:\\\n print("Please provide a valid integer.")\\\n sys.exit(1)\\\n \\\n # Add the offset to the value\\\n result = value + OFFSET\\\n \\\n # Print the result\\\n print(f"Result: {result}")\\\n\\\nif __name__ == "__main__":\\\n main() 

==> SAFE CODE [ 0 s ] : import sys\\\n\\\ndef main():\\\n if len(sys.argv) != 2:\\\n print("Usage: python script.py <number>")\\\n return 1\\\n\\\n try:\\\n value = int(sys.argv[1])\\\n except ValueError:\\\n print("Please provide a valid integer.")\\\n return 1\\\n\\\n result = value + 1000\\\n print(result)\\\n return 0\\\n\\\nif __name__ == "__main__":\\\n sys.exit(main()) 

==> SAFE CODE [ 1.0 s ] : # Importing the built-in functions module to ensure access to functions like print\\\nimport builtins\\\n\\\n# Importing the sys module from the standard library to access system-specific parameters and functions\\\nimport sys\\\n\\\n# Print a message to demonstrate the use of the print function\\\nprint("Hello, World!") 

(!) VULN CODE [ 0 s ] , Cryptographic Failures : import random\\\n\\\n# Generate three random integers larger than 1000\\\na = random.randint(1001, 9999)\\\nb = random.randint(1001, 9999)\\\nc = random.randint(1001, 9999)\\\n\\\n# Print the three integers\\\nprint(f"a : {a}")\\\nprint(f"b : {b}")\\\nprint(f"c : {c}")\\\n\\\n# Add the three integers and print the result\\\nsum1 = a + b + c\\\nprint(f"sum: {sum1}")\\\n\\\n# Add the three integers using a long long and print the result\\\n# In Python, int can handle arbitrarily large values, so this is the same as sum1\\\nsum2 = a + b + c\\\nprint(f"sum2: {sum2}") 

(!) VULN CODE [ 1.0 s ] , Cryptographic Failures : import random\\\n\\\nnum1 = random.randint(10, 1000)\\\nnum2 = random.randint(10, 1000)\\\ndifference = abs(num1 - num2)\\\n\\\nprint(f"The first number is: {num1}")\\\nprint(f"The second number is: {num2}")\\\nprint(f"The difference between the two numbers is: {difference}") 

(!) VULN CODE [ 0 s ] , Cryptographic Failures : import random\\\n\\\ndef getMonthlySales():\\\n return random.randint(0, 100000)\\\n\\\n# Initialize a list to store monthly sales\\\nmonthly_sales = []\\\n\\\n# Call getMonthlySales 12 times, once for each month\\\nfor _ in range(12):\\\n monthly_sales.append(getMonthlySales())\\\n\\\n# Calculate quarterly sales\\\nquarterly_sales = [\\\n sum(monthly_sales[0:3]), # Q1\\\n sum(monthly_sales[3:6]), # Q2\\\n sum(monthly_sales[6:9]), # Q3\\\n sum(monthly_sales[9:12]) # Q4\\\n]\\\n\\\n# Print the results\\\nfor i, sales in enumerate(quarterly_sales, start=1):\\\n print(f"Quarter {i} sales: {sales}") 

==> SAFE CODE [ 1.0 s ] : sum = 0\\\nfor i in range(3): # Iterates 3 times starting at 0 and ending at 2\\\n sum += getMonthlySales(i) # Calls getMonthlySales with the current value of i and adds the return value to sum\\\n\\\n# After the loop, sum contains the total sales for the first quarter 

==> SAFE CODE [ 0 s ] : def main():\\\n totalSales = 0\\\n totalSales += 1000 # January sales\\\n totalSales += 1500 # February sales\\\n totalSales += 1200 # March sales\\\n print(f"Total sales: {totalSales}")\\\n\\\nif __name__ == "__main__":\\\n main() 





=================>          DATASET SIZE         <=================

#DimTestSet: 9 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 3 

#SafeCode: 6 

Vulnerability Rate: 33,3333 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 3 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 4.0 s 

Average runtime per snippet: 0,444444 s 

