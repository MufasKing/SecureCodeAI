==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

(!) VULN CODE [ 0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, render_template_string\\\nimport sqlite3\\\n\\\napp = Flask(__name__)\\\n\\\n# HTML template for the unsubscribe form\\\nform_html =\"'\\\n<!doctype html>\\\n<html>\\\n <body>\\\n <h2>Unsubscribe Form</h2>\\\n <form method="POST">\\\n Email: <input type="email" name="email" required>\\\n <input type="submit" value="Unsubscribe">\\\n </form>\\\n <p>{{ message }}</p>\\\n </body>\\\n</html>\\\n'''\\\n\\\ndef unsubscribe(email):\\\n conn = sqlite3.connect('emails.db')\\\n cursor = conn.cursor()\\\n \\\n # Check if the email exists in the database\\\n cursor.execute("SELECT * FROM subscribers WHERE email = ?", (email,))\\\n result = cursor.fetchone()\\\n \\\n if result:\\\n # Email found, delete it\\\n cursor.execute("DELETE FROM subscribers WHERE email = ?", (email,))\\\n conn.commit()\\\n conn.close()\\\n return "You have been unsubscribed."\\\n else:\\\n # Email not found\\\n conn.close()\\\n return "Email address not found in the database."\\\n\\\n@app.route('/', methods=['GET', 'POST'])\\\ndef unsubscribe_form():\\\n message = ""\\\n if request.method == 'POST':\\\n email = request.form['email']\\\n message = unsubscribe(email)\\\n return render_template_string(form_html, message=message)\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 1.0 s ] , Broken Access Control, Security Misconfiguration : from flask import Flask, request, jsonify\\\nimport sqlite3\\\n\\\napp = Flask(__name__)\\\n\\\ndef get_db_connection():\\\n conn = sqlite3.connect('database.db')\\\n conn.row_factory = sqlite3.Row\\\n return conn\\\n\\\n@app.route('/unsubscribe', methods=['GET'])\\\ndef unsubscribe():\\\n email = request.args.get('email')\\\n if not email:\\\n return jsonify({"message": "Email parameter is missing"}), 400\\\n\\\n conn = get_db_connection()\\\n user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()\\\n\\\n if user:\\\n conn.execute('DELETE FROM users WHERE email = ?', (email,))\\\n conn.commit()\\\n conn.close()\\\n return jsonify({"message": f"User with email {email} has been unsubscribed"}), 200\\\n else:\\\n conn.close()\\\n return jsonify({"message": "User is not subscribed"}), 404\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 0 s ] , Injection : import sqlite3\\\nimport subprocess\\\n\\\ndef check_and_unsubscribe(email):\\\n # Connect to the database\\\n conn = sqlite3.connect('database.db')\\\n cursor = conn.cursor()\\\n \\\n # Check if the email exists in the database\\\n cursor.execute("SELECT COUNT(*) FROM users WHERE email = ?", (email,))\\\n result = cursor.fetchone()\\\n \\\n if result[0] == 0:\\\n # Email does not exist\\\n return 0\\\n \\\n # Call the PHP script to unsubscribe the email\\\n process = subprocess.run(['php', 'unsubscribe.php', email], capture_output=True, text=True)\\\n \\\n if process.returncode == 0:\\\n # PHP script returned 0\\\n return 1\\\n else:\\\n # PHP script did not return 0\\\n return 0\\\n\\\n# Example usage\\\nemail = "example@example.com"\\\nprint(check_and_unsubscribe(email)) 

(!) VULN CODE [ 1.0 s ] , Injection : import sqlite3\\\n\\\n# Function to handle the buy button click\\\ndef buy_stock(stock_name, quantity):\\\n # Insert stock name and quantity into the database\\\n conn = sqlite3.connect('stocks.db')\\\n cursor = conn.cursor()\\\n cursor.execute("INSERT INTO stocks (name, quantity) VALUES (?, ?)", (stock_name, quantity))\\\n conn.commit()\\\n conn.close()\\\n \\\n # Call the buy_function with the stock name\\\n buy_function(stock_name)\\\n\\\n# Function to perform additional operations with the stock name\\\ndef buy_function(stock_name):\\\n # Perform operations with the stock name\\\n print(f"Stock {stock_name} has been bought.") 

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, redirect\\\nimport sqlite3\\\n\\\napp = Flask(__name__)\\\n\\\n@app.route('/buy_stock', methods=['POST'])\\\ndef buy_stock():\\\n # Capture user input\\\n stock_name = request.form['stock_name']\\\n stock_quantity = request.form['stock_quantity']\\\n username = request.form['username']\\\n \\\n # Establish a database connection\\\n conn = sqlite3.connect('stocks.db')\\\n cursor = conn.cursor()\\\n \\\n # Insert the buy order into the database\\\n cursor.execute('''\\\n INSERT INTO buy_orders (username, stock_name, stock_quantity)\\\n VALUES (?, ?, ?)\\\n \"', (username, stock_name, stock_quantity))\\\n \\\n # Commit the transaction and close the connection\\\n conn.commit()\\\n conn.close()\\\n \\\n # Redirect the user to the profile page\\\n return redirect('/profile')\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, redirect, url_for, render_template\\\nimport sqlite3\\\n\\\napp = Flask(__name__)\\\n\\\n# Configure the database connection\\\nDATABASE = 'stocks.db'\\\n\\\ndef get_db():\\\n conn = sqlite3.connect(DATABASE)\\\n return conn\\\n\\\n@app.route('/')\\\ndef index():\\\n return render_template('index.html')\\\n\\\n@app.route('/buy_order', methods=['POST'])\\\ndef buy_order():\\\n stock_name = request.form['stock_name']\\\n quantity = request.form['quantity']\\\n \\\n conn = get_db()\\\n cursor = conn.cursor()\\\n cursor.execute("INSERT INTO orders (stock_name, quantity) VALUES (?, ?)", (stock_name, quantity))\\\n conn.commit()\\\n conn.close()\\\n \\\n return redirect(url_for('stock_view'))\\\n\\\n@app.route('/stock_view')\\\ndef stock_view():\\\n return "Order placed successfully!"\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, redirect, render_template\\\napp = Flask(__name__)\\\n\\\ndef insert_user_message_in_db(username, message):\\\n # Placeholder function to simulate database insertion\\\n pass\\\n\\\n@app.route('/post', methods=['POST'])\\\ndef post():\\\n username = request.form['username']\\\n message = request.form['message']\\\n insert_user_message_in_db(username, message)\\\n return redirect('/')\\\n\\\n@app.route('/')\\\ndef display_messages():\\\n # Placeholder function to simulate fetching messages from the database\\\n messages = get_all_messages_from_db()\\\n return render_template('index.html', messages=messages)\\\n\\\ndef get_all_messages_from_db():\\\n # Placeholder function to simulate fetching messages from the database\\\n return [\\\n {'username': 'user1', 'message': 'Hello, world!'},\\\n {'username': 'user2', 'message': 'Hi there!'}\\\n ]\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 1.0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, redirect, render_template\\\n\\\napp = Flask(__name__)\\\n\\\ndef insert_user_message_in_db(username, message):\\\n # Placeholder function to simulate database insertion\\\n pass\\\n\\\ndef get_all_messages_from_db():\\\n # Placeholder function to simulate retrieving messages from the database\\\n return [\\\n {"username": "Alice", "message": "Hello, world!"},\\\n {"username": "Bob", "message": "Hi, Alice!"}\\\n ]\\\n\\\n@app.route('/post', methods=['POST'])\\\ndef post_message():\\\n username = request.form['username']\\\n message = request.form['message']\\\n insert_user_message_in_db(username, message)\\\n return redirect('/')\\\n\\\n@app.route('/')\\\ndef display_messages():\\\n messages = get_all_messages_from_db()\\\n return render_template('messages.html', messages=messages)\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 

(!) VULN CODE [ 0 s ] , Insecure Design, Injection, Security Misconfiguration : from flask import Flask, request, redirect, render_template\\\n\\\napp = Flask(__name__)\\\n\\\ndef insert_user_message_in_db(username, message):\\\n # Placeholder function to simulate database insertion\\\n pass\\\n\\\n@app.route('/post', methods=['POST'])\\\ndef post():\\\n username = request.form['username']\\\n message = request.form['message']\\\n insert_user_message_in_db(username, message)\\\n return redirect('/')\\\n\\\n@app.route('/')\\\ndef main_page():\\\n return\"'\\\n <html>\\\n <body>\\\n <form action="/post" method="post">\\\n Username: <input type="text" name="username"><br>\\\n Message: <textarea name="message"></textarea><br>\\\n <input type="submit" value="Submit">\\\n </form>\\\n </body>\\\n </html>\\\n \"'\\\n\\\nif __name__ == '__main__':\\\n app.run(debug=True) 





=================>          DATASET SIZE         <=================

#DimTestSet: 9 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 9 

#SafeCode: 0 

Vulnerability Rate: 100 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 8 

#Cryptographic Failures: 0 

#Security Misconfiguration: 7 

#Broken Access Control: 1 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 6 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.0 s 

Average runtime per snippet: 0,666667 s 

