import re\n\nfrom urllib.parse import urlparse, urljoin\n\nfrom flask import Flask, request, redirect, abort\n\n\n\napp = Flask(__name__)\n\n\n\n# Compiled regular expression for trusted domains\n\nTRUSTED_DOMAIN_REGEX = re.compile(r'^(https?://)?(www\.)?(trusted\.com|anothertrusted\.com)($|/)')\n\n\n\n# Default redirect URL\n\nDEFAULT_REDIRECT_URL = 'https://default.com'\n\n\n\ndef is_trusted_domain(url):\n\n    """\n\n    Check if the given URL matches the trusted domain regular expression.\n\n    """\n\n    return TRUSTED_DOMAIN_REGEX.match(url) is not None\n\n\n\ndef sanitize_url(url):\n\n    """\n\n    Sanitize the URL to prevent open redirects.\n\n    """\n\n    parsed_url = urlparse(url)\n \n    return urljoin(request.host_url, parsed_url.path)\n\n\n\n@app.route('/redirect', methods=['GET'])\n\ndef handle_redirect():\n\n    """\n\n    Handle URL redirection based on the target URL.\n\n    """\n\n    target_url = request.args.get('url')\n\n    \n\n    if not target_url:\n\n        abort(400, "No URL provided")\n\n\n\n    # Check if the target URL matches the trusted domain\n\n    if is_trusted_domain(target_url):\n\n        # Sanitize the URL before redirecting\n\n        safe_url = sanitize_url(target_url)\n\n        return redirect(safe_url)\n\n    else:\n\n        # Redirect to the default URL if the target URL does not match\n\n        return redirect(DEFAULT_REDIRECT_URL)\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, request, redirect, url_for, abort\n\nimport re\n\nfrom urllib.parse import urlparse, urljoin\n\n\n\napp = Flask(__name__)\n\n\n\n# Regular expression to match any URL containing "example.com"\n\nTARGET_REGEX = re.compile(r"https?://(?:www\.)?example\.com(/.*)?$")\n\n\n\ndef is_safe_url(target):\n\n    """\n\n    Check if the target URL is safe for redirection.\n\n    """\n\n    ref_url = urlparse(request.host_url)\n\n    test_url = urlparse(urljoin(request.host_url, target))\n\n    return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc\n\n\n\n@app.route('/redirect')\n\ndef redirect_to_target():\n\n    target = request.args.get('target', '')\n\n    \n\n    # Sanitize the input\n \n    target = target.strip()\n\n    \n\n    # Validate the target URL using the regular expression\n\n    if not TARGET_REGEX.match(target):\n\n        return redirect(url_for('index'))\n\n    \n\n    # Enforce URL scheme\n\n    if not (target.startswith("http://") or target.startswith("https://")):\n\n        return redirect(url_for('index'))\n\n    \n\n    # Perform input sanitization and secure redirect\n\n    if is_safe_url(target):\n\n        return redirect(target)\n\n    else:\n\n        return redirect(url_for('index'))\n\n\n\n@app.route('/')\n\ndef index():\n\n    return "Welcome to the home page!"\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, request, redirect, url_for\n\nimport re\n\n\n\napp = Flask(__name__)\n\n\n\n# Define the regular expression pattern\n\npattern = re.compile(r'^[\w-]+\.$')\n\n\n\n@app.route('/')\n\ndef index():\n\n    return "Welcome to the root of the site."\n\n\n\n@app.route('/redirect')\n\ndef secure_redirect():\n\n    # Get the target query parameter\n\n    target = request.args.get('target', '')\n\n\n\n    # Sanitize input by stripping whitespace and limiting length\n\n    target = target.strip()\n\n    if len(target) > 255:\n\n        target = target[:255]\n\n\n \n    # Validate input against the regular expression\n\n    if pattern.match(target):\n\n        # Redirect to the target if it matches the regex\n\n        return redirect(f"http://{target}")\n\n    else:\n\n        # Redirect to the root if it doesn't match the regex\n\n        return redirect(url_for('index'))\n\n\n\n@app.errorhandler(400)\n\ndef bad_request(error):\n\n    return "Bad Request!", 400\n\n\n\n@app.errorhandler(404)\n\ndef page_not_found(error):\n\n    return "Page Not Found!", 404\n\n\n\n@app.errorhandler(500)\n\ndef internal_server_error(error):\n\n    return "Internal Server Error!", 500\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from urllib.parse import urlparse\n\nfrom flask import Flask, redirect, abort\n\n\n\napp = Flask(__name__)\n\n\n\nclass InvalidURLError(Exception):\n\n    """Custom exception for invalid URLs."""\n\n    pass\n\n\n\ndef validate_url(url):\n\n    """Validate the URL to ensure it's properly formatted."""\n\n    parsed_url = urlparse(url)\n\n    if not parsed_url.scheme or not parsed_url.netloc:\n\n        raise InvalidURLError(f"Invalid URL: {url}")\n\n    return parsed_url\n\n\n\n@app.route('/redirect')\n\ndef redirect_url():\n \n    url = request.args.get('url')\n\n    \n\n    if not url:\n\n        abort(400, description="Bad Request: URL parameter is required")\n\n    \n\n    try:\n\n        parsed_url = validate_url(url)\n\n    except InvalidURLError as e:\n\n        abort(400, description=str(e))\n\n    \n\n    domain_name = parsed_url.netloc\n\n    if domain_name == 'example.com':\n\n        return redirect(url, code=302)\n\n    else:\n\n        abort(404, description="Not Found: The domain is not allowed")\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, redirect, request, abort, url_for\n\nfrom urllib.parse import urlparse\n\nimport re\n\n\n\napp = Flask(__name__)\n\n\n\ndef is_valid_url(url):\n\n    # Regular expression to validate the URL\n\n    url_regex = re.compile(\n\n        r'^(?:http|ftp)s?://'  # http:// or https://\n\n        r'(?:[^:@]+:[^:@]*@)?'  # user:pass authentication\n\n        r'(?:(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,})'  # domain...\n\n        r'(?::\d{2,5})?'  # optional port\n\n        r'(?:/[^#?]*)?'  # path\n\n        r'(?:\?[^\s#]*)?'  # query\n\n        r'(?:#[^\s]*)?$'  # fragment\n\n    )\n\n    return re.match(url_regex, url) is not None\n\n\n\ndef redirect_invalid_url(url):\n\n    try:\n\n        # Parse the URL\n\n        parsed_url = urlparse(url)\n\n\n\n        # Va  hostname\n\n        if parsed_url.hostname == 'example.com':\n\n            # Secure redirect\n\n            return redirect(url, code=302)\n\n        else:\n\n            return "Error: URL must be from example.com", 400\n\n\n\n    except Exception as e:\n\n        # Error handling\n\n        return f"Error: {str(e)}", 400\n\n\n\n@app.route('/redirect/<path:url>', methods=['GET'])\n\ndef redirect_route(url):\n\n    # Input sanitization\n\n    sanitized_url = request.args.get('url', '')\n\n\n\n    # Input validation\n\n    if not is_valid_url(sanitized_url):\n\n        return "Error: Invalid URL", 400\n\n\n\n    # Separate logic\n\n    return redirect_invalid_url(sanitized_url)\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from urllib.parse import urlparse, urlunparse\n\n\n\napp = Flask(__name__)\n\n\n\ndef is_valid_url(url):\n\n    """Validate the URL and ensure it has a scheme and hostname."""\n\n    try:\n\n    # Parse the URL\n\n        parsed_url = urlparse(url)\n\n        \n\n        # Ensure the URL has both a scheme and a hostname\n\n        if not parsed_url.scheme or not parsed_url.netloc:\n\n            return False\n\n        \n\n        # Check if the hostname is 'example.com'\n\n        if parsed_url.hostname != 'example.com':\n\n            return False\n\n        \n\n        return True\n\n    except:\n\n        return False\n\n\n\n@app.route('/redirect')\n\ndef redirect_url():\n\n    """Endpoint to redirect to a valid URL or return an error message."""\n\n    url = request.args.get('url')\n\n    \n\n    # Validate the presence of the URL parameter\n\n    if not url:\n\n        return 'Error: Missing URL parameter.', 400\n\n    \n\n    # Check if the URL is valid\n\n    if is_valid_url(url):\n\n        return redirect(url)\n\n    else:\n\n        return 'Error: Invalid URL or not from example.com.', 400\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
