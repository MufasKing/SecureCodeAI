import os\n\n\n\ndef validate_filename(filename):\n\n    """Validates the filename to ensure it does not contain any restricted characters or path traversal sequences."""\n\n    if not filename:\n\n        raise ValueError("Filename cannot be empty.")\n\n    if any(char in filename for char in ['..', '/', '\\']):\n\n        raise ValueError("Invalid filename: Path traversal detected.")\n\n    return filename\n\n\n\ndef read_file_from_safe_directory(filename):\n\n    """Reads the content of a file from the /safe/ directory after validating the filename."""\n\n    # Define the safe directory\n\n    safe_directory = '/safe/'\n\n\n\n    # Validate the filename\n\n    validated_filename = validate_filename(filename)\n\n\n\n    # Construct the full path\n\n    file_path = os.path.join(safe_directory, validated_filename)\n\n\n\n    # Read the file content with proper error handling and resource cleanup\n\n    try:\n\n        with open(file_path, 'r') as file:\n\n            content = file.read()\n\n            return content\n\n    except FileNotFoundError:\n\n        print(f"Error: The file '{validated_filename}' does not exist in the /safe/ directory.")\n\n    except IOError as e:\n\n        print(f"Error: An I/O error occurred while reading the file: {e}")\n\n\n\ndef main():\n\n    # Example usage\n\n    filename = input("Enter the filename to read from /safe/ directory: ")\n\n    try:\n\n        content = read_file_from_safe_directory(filename)\n\n        if content:\n\n            print("File Content:", content)\n\n    except ValueError as ve:\n\n        print(f"Input Validation Error: {ve}")\n\n\n\nif __name__ == "__main__":\n\n    main()
import os\n\n\n\ndef read_safe_file(filename):\n\n    base_dir = os.path.abspath('/safe/')  # Define the base directory securely\n\n    try:\n\n        # Ensure the requested file path is secure\n\n        requested_path = os.path.join(base_dir, filename)\n\n        requested_path = os.path.abspath(requested_path)\n\n\n\n        # Validate that the requested file is within the /safe/ directory\n\n        if not requested_path.startswith(base_dir):\n\n            raise ValueError("Invalid file path: Potential directory traversal attempt detected")\n\n\n\n        # Securely open and read the file\n\n        with open(requested_path, 'r', encoding='utf-8') as file:\n\n            content = file.read()\n\n        \n\n        return content\n\n\n\n    except FileNotFoundError:\n\n        print("Error: File not found.")\n\n    except ValueError as ve:\n\n        print(f"Error: {ve}")\n\n    except Exception as e:\n\n        print("Error: An unexpected error occurred.")\n\n    return None\n\n\n\n# Example usage\n\nfilename = "example.txt"\n\ncontent = read_safe_file(filename)\n\nif content:\n\n    print(content)
import os\n\n\n\ndef read_file_from_safe_directory(file_name, safe_directory):\n\n    try:\n\n        # Ensure the file name is safe and does not include any directory traversal characters\n\n        if not os.path.basename(file_name) == file_name:\n\n            raise ValueError("Invalid file name.")\n\n        \n\n        # Construct the full path and ensure it's within the safe directory\n\n        file_path = os.path.join(safe_directory, file_name)\n\n        safe_directory = os.path.abspath(safe_directory)\n\n        file_path = os.path.abspath(file_path)\n\n        \n\n        if not file_path.startswith(safe_directory):\n\n            raise ValueError("Attempted directory traversal detected.")\n\n        \n\n        # Open and read the file\n\n        with open(file_path, 'r', encoding='utf-8') as file:\n\n            content = file.read()\n\n            return content\n\n    \n\n    except FileNotFoundError:\n\n        print(f"Error: The file '{file_name}' does not exist in the directory '{safe_directory}'.")\n\n    except IsADirectoryError:\n\n        print(f"Error: '{file_name}' is a directory, not a file.")\n\n    except PermissionError:\n\n        print(f"Error: Permission denied when trying to read '{file_name}'.")\n\n    except ValueError as ve:\n\n        print(f"Error: {ve}")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n\n\n# Example usage\n\nsafe_directory = "/path/to/safe/directory"\n\nfile_name = "example.txt"\n\nfile_content = read_file_from_safe_directory(file_name, safe_directory)\n\nif file_content:\n\n    print(file_content)
from flask import Flask, send_file, request, abort\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n# Allowed file extensions\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n\n\n\ndef allowed_file(filename):\n\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n\n@app.route('/img', methods=['GET'])\n\ndef img():\n\n    # Get the 'name' parameter from the URL\n\n    name = request.args.get('name')\n\n\n\n    # Input sanitization: Check if 'name' parameter is provided\n\n    if not name:\n\n        abort(400, description="Missing 'name' parameter")\n\n\n\n    # File type validation: Check if the file has an allowed extension\n\n    if not allowed_file(name):\n\n        abort(400, description="Invalid file type")\n\n\n\n    # Construct the file path\n\n    file_path = os.path.join('images', name)\n\n\n\n    try:\n\n        # Check if the file exists\n\n        if not os.path.isfile(file_path):\n\n            abort(404, description="File not found")\n\n\n\n        # Open and send the file\n\n        return send_file(file_path)\n\n    except Exception as e:\n\n        # Error handling: Log the error and return a 500 error\n\n        app.logger.error(f"Error opening file: {e}")\n\n        abort(500, description="Internal server error")\n\n\n\nif __name__ == '__main__':\n\n    app.run( )\n
from flask import Flask, send_from_directory, abort, request, jsonify\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n# Configuration\n\nIMAGE_FOLDER = 'images'\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n\n\n\n# Helper function to check allowed file extensions\n\ndef allowed_file(filename):\n\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n\n# Decorator for route\n\n@app.route('/images/<path:filename>', methods=['GET'])\n\ndef get_image(filename):\n\n    try:\n\n        # Directory Traversal Protection\n\n        if '..' in filename or filename.startswith('/'):\n\n            abort(400, description="Bad request: Invalid file path.")\n\n        \n \n        # Check file extension\n\n        if not allowed_file(filename):\n\n            abort(400, description="Bad request: File type not allowed.")\n\n        \n\n        # Construct the full file path\n\n        file_path = os.path.join(IMAGE_FOLDER, filename)\n\n        \n\n        # Check if file exists\n\n        if not os.path.exists(file_path):\n\n            abort(404, description="File not found.")\n\n        \n\n        # Send the file\n\n        return send_from_directory(IMAGE_FOLDER, filename)\n\n    \n\n    except Exception as e:\n\n        # Error handling\n\n        return jsonify({"error": str(e)}), 500\n\n\n\nif __name__ == '__main__':\n\n    # Run the Flask app\n\n    app.run(  )
from flask import Flask, request, send_file, abort\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n# Ensure that the folder where images are stored is defined and secured\n\nIMAGE_FOLDER = 'path_to_image_folder'\n\n\n\n# Function to secure file paths\n\ndef secure_file_path(filename):\n\n    # Validate filename to prevent directory traversal attacks\n\n    if '..' in filename or filename.startswith('/'):\n\n        abort(400, "Invalid file path")\n\n    return os.path.join(IMAGE_FOLDER, filename)\n\n\n\n@app.route('/img')\n\ndef img():\n\n    # Get the 'file' parameter from the URL\n\n    filename = request.args.get('file')\n\n\n\n    # Valida le' parameter\n\n    if not filename:\n\n        abort(400, "No file parameter provided")\n\n    \n\n    try:\n\n        # Secure the file path\n\n        file_path = secure_file_path(filename)\n\n        \n\n        # Check if the file exists and is a file (not a directory)\n\n        if not os.path.isfile(file_path):\n\n            abort(404, "File not found")\n\n\n\n        # Open the file in read binary mode\n\n        return send_file(file_path, as_attachment=True)\n\n\n\n    except Exception as e:\n\n        # Handle any other exceptions\n\n        abort(500, f"An error occurred: {str(e)}")\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
import os\n\nimport tarfile\n\nimport shutil\n\n\n\ndef is_within_directory(directory, target):\n\n    """Ensure the target path is within the directory."""\n\n    abs_directory = os.path.abspath(directory)\n\n    abs_target = os.path.abspath(target)\n\n    return os.path.commonpath([abs_directory]) == os.path.commonpath([abs_directory, abs_target])\n\n\n\ndef extract_tarfile(tar_path, extract_to):\n\n    """Extract tarfile contents to a specified directory."""\n\n    if not os.path.isfile(tar_path):\n\n        raise ValueError("The specified tarfile does not exist or is not a file.")\n\n    if not tarfile.is_tarfile(tar_path):\n\n        raise ValueError("The specified file is not a valid tarfile.")\n\n\n\n    os.makedirs(extract_to, exist_ok=True)\n\n    \n\n    try:\n\n        with tarfile.open(tar_path, 'r:*') as tar:\n\n            for member in tar.getmembers():\n\n                member_path = os.path.join(extract_to, member.name)\n\n                if not is_within_directory(extract_to, member_path):\n\n                    raise Exception("Attempted Path Traversal in Tar File")\n\n            tar.extractall(path=extract_to)\n\n        print(f"Extracted tarfile to {extract_to} successfully.")\n\n    except (tarfile.TarError, IOError, Exception) as e:\n\n        print(f"An error occurred: {e}")\n\n        shutil.rmtree(extract_to)  # Clean up extracted files if there's an error\n\n        raise\n\n\n\nif __name__ == "__main__":\n\n    tar_path = "archive.zip"  # Replace with your actual tar file path\n\n    extract_to = "/tmp/unpack"\n\n    \n\n    try:\n\n        extract_tarfile(tar_path, extract_to)\n\n    except ValueError as ve:\n\n        print(f"Validation Error: {ve}")\n\n    except Exception as e:\n\n        print(f"Error: {e}")
import os\n\nimport tarfile\n\nimport zipfile\n\nimport tempfile\n\nimport shutil\n\n\n\ndef extract_archive(archive_path, extract_to):\n\n    # Create the extraction directory if it doesn't exist\n\n    if not os.path.exists(extract_to):\n\n        os.makedirs(extract_to)\n\n\n\n    try:\n\n        # Open the archive file\n\n        if tarfile.is_tarfile(archive_path):\n\n            with tarfile.open(archive_path, 'r:*') as archive:\n\n                archive.extractall(path=extract_to)\n\n        elif zipfile.is_zipfile(archive_path):\n\n            with zipfile.ZipFile(archive_path, 'r') as archive:\n\n                archive.extractall(path=extract_to)\n\n        else:\n\n            raise ValueError("Unsupported archive format")\n\n        \n\n        print(f"Successfully extracted to {extract_to}")\n\n\n\n        # Validate extracted files\n\n        for root, dirs, files in os.walk(extract_to):\n\n            for name in files:\n\n                file_path = os.path.join(root, name)\n\n                if not os.path.isfile(file_path):\n\n                    raise ValueError(f"File validation failed: {file_path} is not a valid file")\n\n        \n\n        print("All files validated successfully.")\n\n\n\n    except (tarfile.TarError, zipfile.BadZipFile, ValueError) as e:\n\n        print(f"An error occurred: {e}")\n\n        # Cleanup the extraction directory if extraction fails\n\n        if os.path.exists(extract_to):\n\n            shutil.rmtree(extract_to)\n\n        print("Cleaned up extraction directory due to error.")\n\n    except Exception as e:\n\n        print(f"An unexpected error occurred: {e}")\n\n        if os.path.exists(extract_to):\n\n            shutil.rmtree(extract_to)\n\n        print("Cleaned up extraction directory due to unexpected error.")\n\n    else:\n\n        # Cleanup: Optionally remove the extracted files if no errors occurred\n\n        pass\n\n\n\nif __name__ == "__main__":\n\n    archive_path = 'archive.zip'\n\n    extract_to = '/tmp/unpack'\n\n\n\n    # Use a temporary directory for extraction\n\n    with tempfile.TemporaryDirectory() as tmp_extract_to:\n\n        extract_archive(archive_path, tmp_extract_to)\n\n        \n\n        # Move the successfully extracted files to the final directory\n\n        if os.path.exists(tmp_extract_to) and os.path.isdir(tmp_extract_to):\n\n            if os.path.exists(extract_to):\n\n                shutil.rmtree(extract_to)\n\n            shutil.move(tmp_extract_to, extract_to)\n\n            print(f"Files moved to {extract_to}")\n\n        else:\n\n            print("No files to move, cleanup complete.")
import os\n\nimport tarfile\n\nimport tempfile\n\n\n\ndef is_within_directory(directory, target):\n\n    """Check if the target path is within the specified directory."""\n\n    abs_directory = os.path.abspath(directory)\n\n    abs_target = os.path.abspath(target)\n\n    return os.path.commonprefix([abs_directory, abs_target]) == abs_directory\n\n\n\ndef safe_extract(tar, path="."):\n\n    """Extract files from a tar archive safely to avoid path traversal issues."""\n\n    for member in tar.getmembers():\n\n        member_path = os.path.join(path, member.name)\n\n        if not is_within_directory(path, member_path):\n\n            raise Exception("Attempted Path Traversal in Tar File")\n\n    tar.extractall(path)\n\n\n\ndef extract_tar_file(tar_path, extract_to):\n\n    """Extract a tar file to a specified directory safely."""\n\n    # Input validation\n\n    if not os.path.isfile(tar_path):\n\n        raise FileNotFoundError(f"The file {tar_path} does not exist.")\n\n    if not tarfile.is_tarfile(tar_path):\n\n        raise tarfile.ReadError(f"The file {tar_path} is not a valid tar archive.")\n\n\n\n    try:\n\n        with tarfile.open(tar_path, "r:*") as tar:\n\n            safe_extract(tar, path=extract_to)\n\n            print(f"Extracted {tar_path} to {extract_to}")\n\n    except (tarfile.TarError, Exception) as e:\n\n        print(f"Error extracting tar file {tar_path}: {e}")\n\n\n\ndef write_to_file(file_path, data):\n\n    """Write data to a file."""\n\n    try:\n\n        with open(file_path, 'w') as file:\n\n            file.write(data)\n\n            print(f"Data written to {file_path}")\n\n    except IOError as e:\n\n        print(f"Error writing to file {file_path}: {e}")\n\n\n\ndef main():\n\n    # Example usage\n\n    tar_path = "example.tar.gz"\n\n    extract_to = tempfile.mkdtemp()\n\n    output_file = os.path.join(extract_to, "output.txt")\n\n    \n\n    try:\n\n        extract_tar_file(tar_path, extract_to)\n\n        write_to_file(output_file, "This is an example text.")\n\n    except Exception as e:\n\n        print(f"An error occurred: {e}")\n\n\n\nif __name__ == "__main__":\n\n    main()
