from flask import Flask, render_template, request, redirect, url_for, flash, session\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField, SubmitField\n\nfrom wtforms.validators import DataRequired, Length\n\nfrom flask_bcrypt import Bcrypt\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\n\nfrom flask_limiter import Limiter\n\nfrom flask_limiter.util import get_remote_address\n\nimport logging\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'your_secure_secret_key'  # Replace with a strong secret key\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\napp.config['SESSION_COOKIE_SECURE'] = True\n\napp.config['REMEMBER_COOKIE_SECURE'] = True\n\napp.config['WTF_CSRF_ENABLED'] = True\n\n\n\ndb = SQLAlchemy(app)\n\nbcrypt = Bcrypt(app)\n\nlogin_manager = LoginManager(app)\n\nlimiter = Limiter(get_remote_address, app=app, default_limits=["5 per minute"])\n\nlogin_manager.login_view = 'login'\n\n\n\n# Logging setup\n\nlogging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')\n\n\n\n# Security headers\n\n@app.after_request\n\ndef set_secure_headers(response):\n\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n\n    response.headers['X-Frame-Options'] = 'DENY'\n\n    response.headers['Content-Security-Policy'] = "default-src 'self'"\n\n    return response\n\n\n\n# Database model\n\nclass User(UserMixin, db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(150), unique=True, nullable=False)\n\n    password = db.Column(db.String(150), nullable=False)\n\n\n\n# WTForms form for login\n\nclass LoginForm(FlaskForm):\n\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=150)])\n\n    password = PasswordField('Password', validators=[DataRequired()])\n\n    submit = SubmitField('Login')\n\n\n\n@login_manager.user_loader\n\ndef load_user(user_id):\n\n    return User.query.get(int(user_id))\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\n@limiter.limit("5 per minute")\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        username = form.username.data\n\n        password = form.password.data\n\n        user = User.query.filter_by(username=username).first()\n\n        \n\n        if user and bcrypt.check_password_hash(user.password, password):\n\n            login_user(user)\n\n            session.permanent = True  # Keeps the session active\n\n            flash('Login successful!', 'success')\n\n            return redirect(url_for('dashboard'))\n\n        else:\n\n            flash('Login failed. Check your username and/or password', 'danger')\n\n            logging.warning('Failed login attempt for username: %s', username)\n\n            return redirect(url_for('login'))\n\n    return render_template('login.html', form=form)\n\n\n\n@app.route('/dashboard')\n\n@login_required\n\ndef dashboard():\n\n    return render_template('dashboard.html', username=current_user.username)\n\n\n\n@app.route('/logout')\n\n@login_required\n\ndef logout():\n\n    logout_user()\n\n    flash('You have been logged out.', 'info')\n\n    return redirect(url_for('login'))\n\n\n\n@app.route('/')\n\ndef home():\n\n    return redirect(url_for('login'))\n\n\n\nif __name__ == '__main__':\n\n    db.create_all()\n\n    app.run(ssl_context='adhoc')  # Uses a self-signed certificate for HTTPS
from flask import Flask, render_template, request, redirect, url_for, session, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom flask_wtf.csrf import CSRFProtect\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField\n\nfrom wtforms.validators import InputRequired, Length\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'your_secret_key'\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\napp.config['SESSION_TYPE'] = 'filesystem'\n\ncsrf = CSRFProtect(app)\n\ndb = SQLAlchemy(app)\n\n\n\nclass User(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(150), unique=True, nullable=False)\n\n    password = db.Column(db.String(150), nullable=False)\n\n\n\nclass LoginForm(FlaskForm):\n\n    username = StringField('username', validators=[InputRequired(), Length(min=4, max=150)])\n\n    password = PasswordField('password', validators=[InputRequired(), Length(min=8, max=150)])\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        username = form.username.data\n\n        password = form.password.data\n\n        user = User.query.filter_by(username=username).first()\n\n        if user and check_password_hash(user.password, password):\n\n            session['user_id'] = user.id\n\n            return redirect(url_for('home'))\n\n        else:\n\n            flash('Invalid username or password')\n\n            return redirect(url_for('login'))\n\n    return render_template('login.html', form=form)\n\n\n\n@app.route('/home')\n\ndef home():\n\n    if 'user_id' in session:\n\n        return f'Welcome, User {session["user_id"]}!'\n\n    else:\n\n        return redirect(url_for('login'))\n\n\n\nif __name__ == '__main__':\n\n    db.create_all()\n\n    app.run(ssl_context='adhoc')  # Runs HTTPS server\n\n
from flask import Flask, request, redirect, url_for, session, render_template, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom werkzeug.exceptions import BadRequestKeyError\n\nimport re\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'your_secret_key'\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\ndb = SQLAlchemy(app)\n\n\n\n# User model\n\nclass User(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(150), unique=True, nullable=False)\n\n    password = db.Column(db.String(150), nullable=False)\n\n\n\n# Create the database and the user table\n\nwith app.app_context():\n\n    db.create_all()\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\ndef login():\n\n    if request.method == 'POST':\n\n        try:\n\n            username = request.form['username']\n\n            password = request.form['password']\n\n        except BadRequestKeyError:\n\n            flash('Invalid input. Please try again.', 'error')\n\n            return redirect(url_for('login'))\n\n\n\n        # Input validation\n\n        if not re.match(r'^[a-zA-Z0-9_]+$', username):\n\n            flash('Username must contain only letters, numbers, and underscores.', 'error')\n\n            return redirect(url_for('login'))\n\n\n\n        user = User.query.filter_by(username=username).first()\n\n\n\n        if user:\n\n            if check_password_hash(user.password, password):\n\n                session['user_id'] = user.id\n\n                flash('Login successful!', 'success')\n\n                return redirect(url_for('home'))\n\n            else:\n\n                flash('Incorrect password. Please try again.', 'error')\n\n                return redirect(url_for('login'))\n\n        else:\n\n            flash('Username does not exist.', 'error')\n\n            return redirect(url_for('login'))\n\n    return render_template('login.html')\n\n\n\n@app.route('/home')\n\ndef home():\n\n    if 'user_id' not in session:\n\n        flash('Please log in first.', 'error')\n\n        return redirect(url_for('login'))\n\n    return render_template('home.html')\n\n\n\n@app.route('/logout')\n\ndef logout():\n\n    session.pop('user_id', None)\n\n    flash('You have been logged out.', 'success')\n\n    return redirect(url_for('login'))\n\n\n\n@app.route('/register', methods=['GET', 'POST'])\n\ndef register():\n\n    if request.method == 'POST':\n\n        try:\n\n            username = request.form['username']\n\n            password = request.form['password']\n\n        except BadRequestKeyError:\n\n            flash('Invalid input. Please try again.', 'error')\n\n            return redirect(url_for('register'))\n\n\n\n        # Input validation\n\n        if not re.match(r'^[a-zA-Z0-9_]+$', username):\n\n            flash('Username must contain only letters, numbers, and underscores.', 'error')\n\n            return redirect(url_for('register'))\n\n\n\n        if User.query.filter_by(username=username).first():\n\n            flash('Username already exists. Please choose another one.', 'error')\n\n            return redirect(url_for('register'))\n\n\n\n        hashed_password = generate_password_hash(password, method='sha256')\n\n        new_user = User(username=username, password=hashed_password)\n\n        db.session.add(new_user)\n\n        db.session.commit()\n\n        flash('Registration successful! Please log in.', 'success')\n\n        return redirect(url_for('login'))\n\n    return render_template('register.html')\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, render_template, request, redirect, url_for, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_bcrypt import Bcrypt\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField, SubmitField\n\nfrom wtforms.validators import DataRequired, Length\n\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user\n\nimport os\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = os.urandom(24)  # Use a secure random key\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\napp.config['SESSION_COOKIE_SECURE'] = True\n\napp.config['REMEMBER_COOKIE_SECURE'] = True\n\n\n\ndb = SQLAlchemy(app)\n\nbcrypt = Bcrypt(app)\n\nlogin_manager = LoginManager(app)\n\nlogin_manager.login_view = 'login'\n\n\n\n# Content Security Policy\n\n@app.after_request\n\ndef set_csp(response):\n\n    response.headers['Content-Security-Policy'] = "default-src 'self'; script-src 'self'; style-src 'self';"\n\n    return response\n\n\n\n# CSRF protection (example, real implementation should use Flask-WTF CSRFProtect)\n\n@app.before_request\n\ndef csrf_protect():\n\n    if request.method == "POST":\n\n        token = session.pop('_csrf_token', None)\n\n        if not token or token != request.form.get('_csrf_token'):\n\n            return redirect(url_for('internal_server_error'))\n\n\n\ndef generate_csrf_token():\n\n    if '_csrf_token' not in session:\n\n        session['_csrf_token'] = os.urandom(24).hex()\n\n    return session['_csrf_token']\n\n\n\napp.jinja_env.globals['csrf_token'] = generate_csrf_token\n\n\n\nclass User(db.Model, UserMixin):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(150), unique=True, nullable=False)\n\n    password = db.Column(db.String(150), nullable=False)\n\n\n\nclass LoginForm(FlaskForm):\n\n    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=150)])\n\n    password = PasswordField('Password', validators=[DataRequired()])\n\n    submit = SubmitField('Login')\n\n\n\n@login_manager.user_loader\n\ndef load_user(user_id):\n\n    return User.query.get(int(user_id))\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        user = User.query.filter_by(username=form.username.data).first()\n\n        if user and bcrypt.check_password_hash(user.password, form.password.data):\n\n            login_user(user)\n\n            return redirect(url_for('success'))\n\n        else:\n\n            flash('Login Unsuccessful. Please check username and password', 'danger')\n\n            return redirect(url_for('cant_login'))\n\n    return render_template('login.html', form=form)\n\n\n\n@app.route('/success')\n\n@login_required\n\ndef success():\n\n    return 'Login Successful!'\n\n\n\n@app.route('/cant_login')\n\ndef cant_login():\n\n    return 'Cannot Login! Invalid credentials.'\n\n\n\n@app.route('/internal_server_error')\n\ndef internal_server_error():\n\n    return 'Internal Server Error!', 500\n\n\n\n@app.errorhandler(500)\n\ndef handle_500_error(_error):\n\n    return redirect(url_for('internal_server_error'))\n\n\n\nif __name__ == '__main__':\n\n    app.run(ssl_context=('cert.pem', 'key.pem'))  # HTTPS
from flask import Flask, render_template, redirect, url_for, request, flash, session\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_bcrypt import Bcrypt\n\nfrom flask_login import LoginManager, login_user, login_required, logout_user, UserMixin, current_user\n\nfrom flask_wtf.csrf import CSRFProtect\n\nfrom forms import LoginForm\n\nfrom models import User\n\nfrom flask_limiter import Limiter\n\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nimport os\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'your_secret_key'\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\napp.config['SESSION_COOKIE_SECURE'] = True\n\n\n\n# Initialize extensions\n\ndb = SQLAlchemy(app)\n\nbcrypt = Bcrypt(app)\n\nlogin_manager = LoginManager(app)\n\ncsrf = CSRFProtect(app)\n\nlimiter = Limiter(app)\n\n\n\n# HTTPS Redirection\n\n@app.before_request\n\ndef before_request():\n\n    if not request.is_secure and not app.debug:\n\n        url = request.url.replace("http://", "https://", 1)\n\n        return redirect(url, code=301)\n\n\n\n# Account Lockout Policy\n\n@limiter.request_filter\n\ndef exempt_logged_in_users():\n\n    return current_user.is_authenticated\n\n\n\n# Load user for session management\n \n@login_manager.user_loader\n\ndef load_user(user_id):\n\n    return User.query.get(int(user_id))\n\n\n\n# Login route\n\n@app.route('/login', methods=['GET', 'POST'])\n\n@limiter.limit("5 per minute", error_message='Too many login attempts. Please try again later.')\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        user = User.query.filter_by(username=form.username.data).first()\n\n        if user and bcrypt.check_password_hash(user.password, form.password.data):\n\n            login_user(user, remember=form.remember.data)\n\n            return redirect(url_for('dashboard'))\n\n        else:\n\n            flash('Login Unsuccessful. Please check username and password', 'danger')\n\n            return redirect(url_for('login'))\n\n    return render_template('login.html', form=form)\n\n\n\n# Dashboard route\n\n@app.route('/dashboard')\n\n@login_required\n\ndef dashboard():\n\n    return render_template('dashboard.html', username=current_user.username)\n\n\n\n# Logout route\n\n@app.route('/logout')\n\n@login_required\n\ndef logout():\n\n    logout_user()\n\n    return redirect(url_for('login'))\n\n\n\n# Run the app\n\nif __name__ == '__main__':\n\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n    app.run(ssl_context='adhoc',   )
from flask import Flask, render_template, request, redirect, url_for, session, flash\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField\n\nfrom wtforms.validators import DataRequired, Length\n\nfrom flask_bcrypt import Bcrypt\n\nfrom flask_limiter import Limiter\n\nfrom flask_limiter.util import get_remote_address\n\nfrom flask_talisman import Talisman\n\nfrom functools import wraps\n\nimport os\n\n\n\napp = Flask(__name__)\n\napp.secret_key = os.urandom(24)\n\n\n\n# Password hashing\n\nbcrypt = Bcrypt(app)\n\n\n\n# CSRF Protection\n\nTalisman(app)\n\n\n\n# Rate Limiting\n\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=["5 per minute"])\n\n\n\n# Secure Headers\n\nTalisman(app, content_security_policy=None)\n\n\n\n# Dummy user for demonstration\n\nusers = {\n\n    "user1": bcrypt.generate_password_hash("password123").decode('utf-8')\n\n}\n\n\n\n# Login Form\n\nclass LoginForm(FlaskForm):\n\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=20)])\n\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=100)])\n\n\n\n# User authentication check\n\ndef login_required(f):\n\n    @wraps(f) \n\n    def decorated_function(*args, **kwargs):\n\n        if 'username' not in session:\n\n            return redirect(url_for('login'))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n    \n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\n@limiter.limit("5 per minute")\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        username = form.username.data\n\n        password = form.password.data\n\n        user_password_hash = users.get(username)\n\n        if user_password_hash and bcrypt.check_password_hash(user_password_hash, password):\n\n            session['username'] = username\n\n            return redirect(url_for('session_page'))\n\n        else:\n\n            flash('Username or Password is incorrect', 'error')\n\n    return render_template('login.html', form=form)\n\n\n\n@app.route('/session')\n\n@login_required\n\ndef session_page():\n\n    return f'Welcome {session["username"]} to your session page! <a href="/logout">Logout</a>'\n\n\n\n@app.route('/logout')\n\n@login_required\n\ndef logout():\n\n    session.pop('username', None)\n\n    return redirect(url_for('login'))\n\n\n\n@app.errorhandler(429)\n\ndef ratelimit_handler(e):\n\n    return "You have exceeded your login attempts. Please try again later.", 429\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, session, render_template_string, redirect, url_for, request\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField\n\nfrom wtforms.validators import DataRequired, Email, Length, Regexp\n\nfrom flask_wtf.csrf import CSRFProtect\n\nimport re\n\nimport os\n\n\n\napp = Flask(__name__)\n\napp.secret_key = os.urandom(24)  # Secure secret key\n\ncsrf = CSRFProtect(app)\n\n\n\n# Input validation and sanitization function\n\ndef sanitize_input(data):\n\n    return re.sub(r'[^\w\s@.]', '', data)\n\n\n\n# Mock function to simulate user login\n\ndef mock_user_login():\n\n    session['username'] = 'test_user'\n\n    session['email'] = 'test_user@example.com'\n\n    session['ssn'] = '123-45-6789'\n\n\n\n@app.route('/info', methods=['GET'])\n\ndef info():\n\n    # Ensure user is "logged in" by checking session variables\n\n    if 'username' not in session or 'email' not in session or 'ssn' not in session:\n\n        return redirect(url_for('login'))\n\n    \n\n    username = sanitize_input(session['username'])\n\n    email =  nput(session['email'])\n\n    ssn_last4 = session['ssn'][-4:]  # Only show last 4 digits of SSN\n\n    \n\n    # Create a simple HTML template for the response\n\n    html_template = '''\n\n    <!DOCTYPE html>\n\n    <html lang="en">\n\n    <head>\n\n        <meta charset="UTF-8">\n\n        <title>User Info</title>\n\n    </head>\n\n    <body>\n\n        <h1>User Information</h1>\n\n        <p><strong>Username:</strong> {{ username }}</p>\n\n        <p><strong>Email:</strong> {{ email }}</p>\n\n        <p><strong>SSN (Last 4 digits):</strong> {{ ssn_last4 }}</p>\n\n    </body>\n\n    </html>\n\n    '''\n\n    \n\n    return render_template_string(html_template, username=username, email=email, ssn_last4=ssn_last4)\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\ndef login():\n\n    # Simulating user login for demonstration purposes\n\n    mock_user_login()\n\n    return redirect(url_for('info'))\n\n\n\nif __name__ == '__main__':\n\n    app.run(  )
from flask import Flask, render_template, request, redirect, url_for, flash\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\n\nfrom flask_wtf import FlaskForm\n\nfrom wtforms import StringField, PasswordField, SubmitField\n\nfrom wtforms.validators import DataRequired, Email, Length, ValidationError\n\nfrom flask_limiter import Limiter\n\nfrom flask_talisman import Talisman\n\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nimport logging\n\nimport os\n\nimport re\n\nfrom cryptography.fernet import Fernet\n\n\n\n# Secure key generation for sensitive data protection\n\nSECRET_KEY = os.urandom(32)\n\nFERNET_KEY = Fernet.generate_key()\n\ncipher_suite = Fernet(FERNET_KEY)\n\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = SECRET_KEY\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n\n\ndb = SQLAlchemy(app)\n\nlogin_manager = LoginManager(app)\n\nlogin_manager.login_view = 'login'\n\n\n\n# Secure headers with Flask-Talisman\n\ntalisman = Talisman(app)\n\n\n\n# Rate limiting with Flask-Limiter\n\nlimiter = Limiter(app, key_func=lambda: request.remote_addr)\n\n\n\n# Logging setup\n\nlogging.basicConfig(level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n\n# User model\n\nclass User(UserMixin, db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    username = db.Column(db.String(150), unique=True, nullable=False)\n\n    email = db.Column(db.String(150), unique=True, nullable=False)\n\n    password = db.Column(db.String(200), nullable=False)\n\n    ssn = db.Column(db.String(200), nullable=False)  # Encrypted SSN\n\n\n\n    def set_password(self, password):\n\n        self.password = generate_password_hash(password)\n\n\n\n    def check_password(self, password):\n\n        return check_password_hash(self.password, password)\n\n\n\n    def set_ssn(self, ssn):\n\n        self.ssn = cipher_suite.encrypt(ssn.encode()).decode()\n\n\n\n    def get_ssn(self):\n\n        return cipher_suite.decrypt(self.ssn.encode()).decode()\n\n\n\n# Login manager user loader\n\n@login_manager.user_loader\n\ndef load_user(user_id):\n\n    return User.query.get(int(user_id))\n\n\n\n# Registration form\n\nclass RegistrationForm(FlaskForm):\n\n    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=150)])\n\n    email = StringField('Email', validators=[DataRequired(), Email()])\n\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n\n    ssn = StringField('SSN', validators=[DataRequired(), Length(min=11, max=11)])\n\n    submit = SubmitField('Register')\n\n\n\n    def validate_ssn(self, ssn):\n\n        if not re.match(r'^\d{3}-\d{2}-\d{4}$', ssn.data):\n\n            raise ValidationError('SSN must be in the format XXX-XX-XXXX')\n\n\n\n# Login form\n\nclass LoginForm(FlaskForm):\n\n    email = StringField('Email', validators=[DataRequired(), Email()])\n\n    password = PasswordField('Password', validators=[DataRequired()])\n\n    submit = SubmitField('Login')\n\n\n\n@app.route('/register', methods=['GET', 'POST'])\n\ndef register():\n\n    form = RegistrationForm()\n\n    if form.validate_on_submit():\n\n        user = User(username=form.username.data, email=form.email.data)\n\n        user.set_password(form.password.data)\n\n        user.set_ssn(form.ssn.data)\n\n        db.session.add(user)\n\n        db.session.commit()\n\n        logger.info(f"New user registered: {user.username}")\n\n        return redirect(url_for('login'))\n\n    return render_template('register.html', form=form)\n\n\n\n@app.route('/login', methods=['GET', 'POST'])\n\n@limiter.limit("5 per minute")\n\ndef login():\n\n    form = LoginForm()\n\n    if form.validate_on_submit():\n\n        user = User.query.filter_by(email=form.email.data).first()\n\n        if user and user.check_password(form.password.data):\n\n            login_user(user)\n\n            logger.info(f"User logged in: {user.username}")\n\n            return redirect(url_for('info'))\n\n        else:\n\n            flash('Invalid email or password')\n\n    return render_template('login.html', form=form)\n\n\n\n@app.route('/logout')\n\n@login_required\n\ndef logout():\n\n    logger.info(f"User logged out: {current_user.username}")\n\n    logout_user()\n\n    return redirect(url_for('login'))\n\n\n\n@app.route('/info')\n\n@login_required\n\ndef info():\n\n    user = current_user\n\n    email = user.email\n\n    username = user.username\n\n    ssn = user.get_ssn()\n\n    last_4_ssn = ssn[-4:]\n\n    return render_template('info.html', username=username, email=email, last_4_ssn=last_4_ssn)\n\n\n\n# Disable debug mode for production\n\nif __name__ == '__main__':\n\n    db.create_all()\n\n    app.run(debug=False, ssl_context='adhoc')  # Using ad-hoc SSL context for HTTPS
from flask import Flask, session, request, jsonify\n\nfrom flask import escape as flask_escape\n\nimport os\n\n\n\napp = Flask(__name__)\n\n\n\n# Ensure the secret key is set from an environment variable for session management\n\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'default_secret_key')\n\n\n\n# Dummy authentication check function\n\ndef is_authenticated():\n\n    # In a real-world scenario, you'd have proper authentication mechanisms\n\n    return session.get('authenticated', False)\n\n\n\n# Utility function for sensitive data masking\n\ndef mask_sensitive_data(data, mask_char='*', unmasked_count=4):\n\n    if len(data) <= unmasked_count:\n\n        return data\n\n    return mask_char * (len(data) - unmasked_count) + data[-unmasked_count:]\n\n\n\n@app.route('/info', methods=['GET'])\n\ndef info():\n\n    # Check if the user is authenticated\n\n    if not is_authenticated():\n\n        return jsonify({"error": "Unauthorized access"}), 401\n\n    \n\n    # Get user info from session (ensure these are set in session during login)\n\n    username = session.get('username', 'Unknown')\n\n    email = session.get('email', 'Unknown')\n\n    ssn = session.get('ssn', 'Unknown')\n\n\n\n    # Escape the output to prevent XSS\n\n    escaped_username = flask_escape(username)\n\n    escaped_email = flask_escape(email)\n\n    masked_ssn = mask_sensitive_data(ssn)\n\n    \n\n    # Return the user info\n\n    return jsonify({\n\n        "username": escaped_username,\n\n        "email": escaped_email,\n\n        "ssn": masked_ssn\n\n    })\n\n\n\n# Simulated login route for setting session data\n\n@app.route('/login', methods=['POST'])\n\ndef login():\n\n    username = request.form.get('username')\n\n    email = request.form.get('email')\n\n    ssn = request.form.get('ssn')\n\n\n\n    if not username or not email or not ssn:\n\n        return jsonify({"error": "Invalid input"}), 400\n\n\n\n    # Simple validation (expand as needed)\n\n    if len(ssn) != 9 or not ssn.isdigit():\n\n        return jsonify({"error": "Invalid SSN"}), 400\n\n\n\n    # Set session data\n\n    session['authenticated'] = True\n\n    session['username'] = username\n\n    session['email'] = email\n\n    session['ssn'] = ssn\n\n    \n\n    return jsonify({"message": "Login successful"}), 200\n\n\n\nif __name__ == '__main__':\n\n    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))\n\n
