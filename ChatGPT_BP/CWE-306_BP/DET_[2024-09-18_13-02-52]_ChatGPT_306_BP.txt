==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0 s ] : from flask import Flask, render_template, request, redirect, url_for, session, flash\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField\\\n\\\nfrom wtforms.validators import DataRequired, Length, Regexp\\\n\\\nfrom flask_bcrypt import Bcrypt\\\n\\\nfrom flask_wtf.csrf import CSRFProtect\\\n\\\nimport logging\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = 'your_secret_key'\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True # Ensure cookies are only sent over HTTPS\\\n\\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['REMEMBER_COOKIE_DURATION'] = 3600 # 1 hour\\\n\\\n\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\nbcrypt = Bcrypt(app)\\\n\\\nlimiter = Limiter(app, key_func=lambda: request.remote_addr)\\\n\\\n\\\n\\\n# Logging setup\\\n\\\nlogging.basicConfig(level=logging.INFO)\\\n\\\n\\\n\\\n# Dummy user data (use a database in production)\\\n\\\nusers = {\\\n\\\n 'admin': bcrypt.generate_password_hash('Password123!').decode('utf-8')\\\n\\\n}\\\n\\\n\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\\\n\\\n password = PasswordField('Password', validators=[\\\n\\\n DataRequired(),\\\n\\\n Length(min=8),\\\n\\\n Regexp(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&#]).+$', message="Password must contain an upper case letter, a lower case letter, a digit, and a special character.")\\\n\\\n ])\\\n\\\n\\\n\\\n@app.route('/')\\\n\\\ndef index():\\\n\\\n return render_template('index.html')\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n username = form.username.data\\\n\\\n password = form.password.data\\\n\\\n if username in users and bcrypt.check_password_hash(users[username], password):\\\n\\\n session['username'] = username\\\n\\\n return redirect(url_for('secret'))\\\n\\\n else:\\\n\\\n flash('Invalid username or password', 'danger')\\\n\\\n logging.warning(f'Failed login attempt for username: {username}')\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/secret')\\\n\\\ndef secret():\\\n\\\n if 'username' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n return 'Secret settings'\\\n\\\n\\\n\\\n@app.errorhandler(404)\\\n\\\ndef not_found_error(error):\\\n\\\n return '404 Page Not Found', 404\\\n\\\n\\\n\\\n@app.errorhandler(500)\\\n\\\ndef internal_error(error):\\\n\\\n return '500 Internal Server Error', 500\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Use HTTPS in development; use a proper SSL certificate in production 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, render_template, redirect, url_for, request, flash\\\n\\\nfrom flask_bcrypt import Bcrypt\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField\\\n\\\nfrom wtforms.validators import InputRequired, Length\\\n\\\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom functools import wraps\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = 'your_secret_key_here'\\\n\\\napp.config['WTF_CSRF_SECRET_KEY'] = 'your_csrf_secret_key_here'\\\n\\\n\\\n\\\nbcrypt = Bcrypt(app)\\\n\\\nlogin_manager = LoginManager(app)\\\n\\\nlogin_manager.login_view = 'login'\\\n\\\n\\\n\\\n# User Data Management - In-memory user storage\\\n\\\nusers = {\\\n\\\n 'user@example.com': {'password': generate_password_hash('userpassword'), 'role': 'user'},\\\n\\\n 'admin@example.com': {'password': generate_password_hash('adminpassword'), 'role': 'admin'}\\\n\\\n}\\\n\\\n\\\n\\\nclass User(UserMixin):\\\n\\\n def __init__(self, email, role):\\\n\\\n self.id = email\\\n\\\n self.role = role\\\n\\\n\\\n\\\n@login_manager.user_loader\\\n\\\ndef load_user(user_id):\\\n\\\n user = users.get(user_id)\\\n\\\n if user:\\\n\\\n return User(email=user_id, role=user['role'])\\\n\\\n return None\\\n\\\n\\\n\\\n# Form for login\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n email = StringField('Email', validators=[InputRequired(), Length(min=4, max=50)])\\\n\\\n password = PasswordField('Password', validators=[InputRequired(), Length(min=4, max=25)])\\\n\\\n\\\n\\\n# Role-Based Access Control Decorator\\\n\\\ndef role_required(role):\\\n\\\n def wrapper(f):\\\n\\\n @wraps(f)\\\n\\\n def decorated_function(*args, **kwargs):\\\n\\\n if not current_user.is_authenticated or current_user.role != role:\\\n\\\n flash('You do not have access to this page.', 'danger')\\\n\\\n return redirect(url_for('login'))\\\n\\\n return f(*args, **kwargs)\\\n\\\n return decorated_function\\\n\\\n return wrapper\\\n\\\n\\\n\\\n@app.route('/')\\\n\\\n@login_required\\\n\\\ndef index():\\\n\\\n if current_user.role == 'admin':\\\n\\\n return redirect(url_for('admin'))\\\n\\\n return redirect(url_for('user'))\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n user = users.get(form.email.data)\\\n\\\n if user and check_password_hash(user['password'], form.password.data):\\\n\\\n login_user(User(email=form.email.data, role=user['role']))\\\n\\\n return redirect(url_for('index'))\\\n\\\n else:\\\n\\\n flash('Invalid email or password', 'danger')\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/user')\\\n\\\n@login_required\\\n\\\n@role_required('user')\\\n\\\ndef user():\\\n\\\n return 'User Page'\\\n\\\n\\\n\\\n@app.route('/admin')\\\n\\\n@login_required\\\n\\\n@role_required('admin')\\\n\\\ndef admin():\\\n\\\n return 'Admin Page'\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\n@login_required\\\n\\\ndef logout():\\\n\\\n logout_user()\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc')\\\n\\\n 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, render_template, request, redirect, url_for, flash, session\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField, validators\\\n\\\nfrom flask_bcrypt import Bcrypt\\\n\\\nfrom flask_sqlalchemy import SQLAlchemy\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_wtf.csrf import CSRFProtect\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = 'supersecretkey'\\\n\\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\\n\\\napp.config['SESSION_TYPE'] = 'filesystem'\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True # Ensure cookies are sent over HTTPS\\\n\\\n\\\n\\\nbcrypt = Bcrypt(app)\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\ndb = SQLAlchemy(app)\\\n\\\nlimiter = Limiter(app, key_func=lambda: request.remote_addr)\\\n\\\n\\\n\\\nclass User(db.Model):\\\n\\\n id = db.Column(db.Integer, primary_key=True)\\\n\\\n username = db.Column(db.String(150), unique=True, nullable=False)\\\n\\\n password = db.Column(db.String(150), nullable=False)\\\n\\\n\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', [validators.DataRequired(), validators.Length(min=4, max=25)])\\\n\\\n password = PasswordField('Password', [validators.DataRequired(), validators.Length(min=6, max=35)])\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET'])\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/do_login', methods=['POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting\\\n\\\ndef do_login():\\\n\\\n form = LoginForm(request.form)\\\n\\\n if form.validate_on_submit():\\\n\\\n username = form.username.data\\\n\\\n password = form.password.data\\\n\\\n\\\n\\\n # Input validation\\\n\\\n if not re.match(r'^[a-zA-Z0-9_]+$', username):\\\n\\\n flash('Invalid username format.', 'danger')\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n user = User.query.filter_by(username=username).first()\\\n\\\n if user and check_password_hash(user.password, password):\\\n\\\n session['user_id'] = user.id\\\n\\\n return redirect(url_for('user_page'))\\\n\\\n else:\\\n\\\n flash('Invalid username or password.', 'danger')\\\n\\\n return redirect(url_for('login'))\\\n\\\n else:\\\n\\\n flash('Form validation failed.', 'danger')\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n@app.route('/user_page', methods=['GET'])\\\n\\\ndef user_page():\\\n\\\n if 'user_id' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n return "Welcome to the user page!"\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n db.create_all()\\\n\\\n app.run(ssl_context=('cert.pem', 'key.pem')) # Ensure HTTPS is used 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, redirect, url_for, render_template, session, flash\\\n\\\nfrom flask_wtf import FlaskForm, CSRFProtect\\\n\\\nfrom wtforms import StringField, PasswordField\\\n\\\nfrom wtforms.validators import DataRequired, Length\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_limiter.util import get_remote_address\\\n\\\nfrom itsdangerous import URLSafeTimedSerializer\\\n\\\nimport os\\\n\\\nimport logging\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') # Secure secret management\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\nlimiter = Limiter(app, key_func=get_remote_address)\\\n\\\n\\\n\\\n# Logging\\\n\\\nlogging.basicConfig(level=logging.INFO)\\\n\\\n\\\n\\\n# Secure headers\\\n\\\n@app.after_request\\\n\\\ndef set_secure_headers(response):\\\n\\\n response.headers['Content-Security-Policy'] = "default-src 'self'"\\\n\\\n response.headers['X-Content-Type-Options'] = 'nosniff'\\\n\\\n response.headers['X-Frame-Options'] = 'DENY'\\\n\\\n response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\\\n\\\n return response\\\n\\\n\\\n\\\n# Forms\\\n\\\nclass LoginForm(FlaskForm):\\\n\\\n username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\\\n\\\n password = PasswordField('Password', validators=[DataRequired(), Length(min=6, max=36)])\\\n\\\n\\\n\\\n# User database mockup\\\n\\\nusers = {\\\n\\\n "admin": generate_password_hash("admin_password"),\\\n\\\n "user": generate_password_hash("user_password")\\\n\\\n}\\\n\\\nroles = {\\\n\\\n "admin": "admin",\\\n\\\n "user": "user"\\\n\\\n}\\\n\\\n\\\n\\\n# Serializer for secure token generation\\\n\\\nserializer = URLSafeTimedSerializer(app.config['SECRET_KEY'])\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET'])\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef login():\\\n\\\n form = LoginForm()\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/do_login', methods=['POST'])\\\n\\\n@csrf.exempt # Normally, you would not exempt this from CSRF protection\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef do_login():\\\n\\\n form = LoginForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n username = form.username.data\\\n\\\n password = form.password.data\\\n\\\n if username in users and check_password_hash(users[username], password):\\\n\\\n session['username'] = username\\\n\\\n session['role'] = roles[username]\\\n\\\n flash('Login successful!', 'success')\\\n\\\n return redirect(url_for('index'))\\\n\\\n else:\\\n\\\n flash('Invalid credentials', 'danger')\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n@app.route('/')\\\n\\\n@limiter.limit("10 per minute")\\\n\\\ndef index():\\\n\\\n return render_template('index.html', username=session.get('username'))\\\n\\\n\\\n\\\n@app.route('/user_page')\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef user_page():\\\n\\\n if 'username' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n if session.get('role') != 'user':\\\n\\\n return redirect(url_for('index'))\\\n\\\n return render_template('user_page.html', username=session['username'])\\\n\\\n\\\n\\\n@app.route('/admin_page')\\\n\\\n@limiter.limit("5 per minute")\\\n\\\ndef admin_page():\\\n\\\n if 'username' not in session:\\\n\\\n return redirect(url_for('login'))\\\n\\\n if session.get('role') != 'admin':\\\n\\\n return redirect(url_for('index'))\\\n\\\n return render_template('admin_page.html', username=session['username'])\\\n\\\n\\\n\\\n# Error handling\\\n\\\n@app.errorhandler(404)\\\n\\\ndef not_found_error(error):\\\n\\\n return render_template('404.html'), 404\\\n\\\n\\\n\\\n@app.errorhandler(500)\\\n\\\ndef internal_error(error):\\\n\\\n return render_template('500.html'), 500\\\n\\\n\\\n\\\n# Ensure HTTPS\\\n\\\n@app.before_request\\\n\\\ndef before_request():\\\n\\\n if not request.is_secure:\\\n\\\n url = request.url.replace("http://", "https://", 1)\\\n\\\n return redirect(url)\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Use 'adhoc' for a self-signed certificate for development\\\n\\\n 

==> SAFE CODE [ 0 s ] : from flask import Flask, render_template, redirect, request, session, url_for, flash\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom flask_wtf.csrf import CSRFProtect\\\n\\\nfrom flask_talisman import Talisman\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom flask_limiter.util import get_remote_address\\\n\\\nfrom wtforms import Form, StringField, PasswordField, validators\\\n\\\nimport logging\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.secret_key = 'your_secret_key' # Use a secure, random key in production\\\n\\\ncsrf = CSRFProtect(app)\\\n\\\nTalisman(app)\\\n\\\nlimiter = Limiter(app, key_func=get_remote_address)\\\n\\\n\\\n\\\n# Logging setup\\\n\\\nlogging.basicConfig(filename='security.log', level=logging.INFO)\\\n\\\n\\\n\\\n# Mock database\\\n\\\nusers_db = {\\\n\\\n "user1": {\\\n\\\n "email": "user1@example.com",\\\n\\\n "password": generate_password_hash("password123")\\\n\\\n }\\\n\\\n}\\\n\\\n\\\n\\\n# Forms\\\n\\\nclass LoginForm(Form):\\\n\\\n email = StringField('Email', [validators.DataRequired(), validators.Email()])\\\n\\\n password = PasswordField('Password', [validators.DataRequired()])\\\n\\\n\\\n\\\nclass ChangeEmailForm(Form):\\\n\\\n old_email = StringField('Old Email', [validators.DataRequired(), validators.Email()])\\\n\\\n new_email = StringField('New Email', [validators.DataRequired(), validators.Email()])\\\n\\\n password = PasswordField('Password', [validators.DataRequired()])\\\n\\\n\\\n\\\n# Routes\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting\\\n\\\ndef login():\\\n\\\n form = LoginForm(request.form)\\\n\\\n if request.method == 'POST' and form.validate():\\\n\\\n email = form.email.data\\\n\\\n password = form.password.data\\\n\\\n user = next((u for u in users_db.values() if u['email'] == email), None)\\\n\\\n if user and check_password_hash(user['password'], password):\\\n\\\n session['logged_in'] = True\\\n\\\n session['email'] = email\\\n\\\n logging.info(f"Login successful for {email}")\\\n\\\n return redirect(url_for('change_email'))\\\n\\\n else:\\\n\\\n logging.warning(f"Failed login attempt for {email}")\\\n\\\n flash('Invalid login credentials', 'danger')\\\n\\\n return render_template('login.html', form=form)\\\n\\\n\\\n\\\n@app.route('/change_email', methods=['GET', 'POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting\\\n\\\ndef change_email():\\\n\\\n if not session.get('logged_in'):\\\n\\\n return redirect(url_for('login'))\\\n\\\n \\\n\\\n form = ChangeEmailForm(request.form)\\\n\\\n if request.method == 'POST' and form.validate():\\\n\\\n old_email = form.old_email.data\\\n\\\n new_email = form.new_email.data\\\n\\\n password = form.password.data\\\n\\\n \\\n\\\n if old_email == new_email:\\\n\\\n flash('New email must be different from the old email', 'danger')\\\n\\\n return render_template('change_email.html', form=form)\\\n\\\n \\\n\\\n user = next((u for u in users_db.values() if u['email'] == old_email), None)\\\n\\\n if user and check_password_hash(user['password'], password):\\\n\\\n user['email'] = new_email\\\n\\\n session['email'] = new_email\\\n\\\n logging.info(f"Email changed from {old_email} to {new_email}")\\\n\\\n flash('Email changed successfully', 'success')\\\n\\\n return redirect(url_for('change_email'))\\\n\\\n else:\\\n\\\n logging.warning(f"Failed email change attempt for {old_email}")\\\n\\\n flash('Invalid credentials', 'danger')\\\n\\\n return render_template('change_email.html', form=form)\\\n\\\n\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.clear()\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # Run with HTTPS 

(!) VULN CODE [ 1.0 s ] , Injection, Insecure Design : from flask import Flask, render_template, request, redirect, url_for, flash, session\\\n\\\nfrom flask_wtf import FlaskForm\\\n\\\nfrom wtforms import StringField, PasswordField, SubmitField\\\n\\\nfrom wtforms.validators import DataRequired, Email, EqualTo\\\n\\\nfrom flask_limiter import Limiter\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nfrom sqlalchemy import create_engine, Column, Integer, String\\\n\\\nfrom sqlalchemy.ext.declarative import declarative_base\\\n\\\nfrom sqlalchemy.orm import sessionmaker\\\n\\\nimport logging\\\n\\\n\\\n\\\n# Configuration\\\n\\\napp = Flask(__name__)\\\n\\\napp.config['SECRET_KEY'] = 'your_secure_secret_key' # Replace with a strong, secure key\\\n\\\napp.config['SESSION_COOKIE_SECURE'] = True # Ensure cookies are only sent over HTTPS\\\n\\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\\\n\\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\\n\\\n\\\n\\\n# Rate Limiting\\\n\\\nlimiter = Limiter(app, key_func=lambda: request.remote_addr)\\\n\\\n\\\n\\\n# Logging configuration\\\n\\\nlogging.basicConfig(level=logging.INFO)\\\n\\\nlogger = logging.getLogger(__name__)\\\n\\\n\\\n\\\n# Database setup (SQLite for simplicity)\\\n\\\nengine = create_engine('sqlite:///users.db', echo=True)\\\n\\\nBase = declarative_base()\\\n\\\n\\\n\\\nclass User(Base):\\\n\\\n __tablename__ = 'users'\\\n\\\n id = Column(Integer, primary_key=True)\\\n\\\n email = Column(String, unique=True, nullable=False)\\\n\\\n password = Column(String, nullable=False)\\\n\\\n\\\n\\\nBase.metadata.create_all(engine)\\\n\\\nSession = sessionmaker(bind=engine)\\\n\\\ndb_session = Session()\\\n\\\n\\\n\\\n# Flask-WTF form\\\n\\\nclass EmailChangeForm(FlaskForm):\\\n\\\n old_email = StringField('Old Email', validators=[DataRequired(), Email()])\\\n\\\n new_email = StringField('New Email', validators=[DataRequired(), Email()])\\\n\\\n confirm_password = PasswordField('Confirm Password', validators=[DataRequired()])\\\n\\\n submit = SubmitField('Change Email')\\\n\\\n\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n if request.method == 'POST':\\\n\\\n email = request.form['email']\\\n\\\n password = request.form['password']\\\n\\\n \\\n\\\n user = db_session.query(User).filter_by(email=email).first()\\\n\\\n\\\n\\\n if user and check_password_hash(user.password, password):\\\n\\\n session['user_id'] = user.id\\\n\\\n session['email'] = user.email\\\n\\\n logger.info(f"User {email} logged in successfully.")\\\n\\\n return redirect(url_for('change_email'))\\\n\\\n else:\\\n\\\n flash('Invalid credentials', 'danger')\\\n\\\n logger.warning(f"Failed login attempt for email: {email}")\\\n\\\n\\\n\\\n return render_template('login.html')\\\n\\\n\\\n\\\n@app.route('/change_email', methods=['GET', 'POST'])\\\n\\\n@limiter.limit("5 per minute") # Rate limiting to prevent abuse\\\n\\\ndef change_email():\\\n\\\n if 'user_id' not in session:\\\n\\\n flash('You must be logged in to change your email.', 'warning')\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n form = EmailChangeForm()\\\n\\\n if form.validate_on_submit():\\\n\\\n old_email = form.old_email.data\\\n\\\n new_email = form.new_email.data\\\n\\\n confirm_password = form.confirm_password.data\\\n\\\n\\\n\\\n user = db_session.query(User).filter_by(id=session['user_id']).first()\\\n\\\n\\\n\\\n if user and user.email == old_email and check_password_hash(user.password, confirm_password):\\\n\\\n user.email = new_email\\\n\\\n db_session.commit()\\\n\\\n session['email'] = new_email\\\n\\\n flash('Your email has been updated successfully.', 'success')\\\n\\\n logger.info(f"User {old_email} changed email to {new_email}.")\\\n\\\n return redirect(url_for('profile'))\\\n\\\n else:\\\n\\\n flash('Invalid email or password', 'danger')\\\n\\\n logger.warning(f"Email change attempt failed for user ID: {session['user_id']}")\\\n\\\n\\\n\\\n return render_template('change_email.html', form=form)\\\n\\\n\\\n\\\n@app.route('/profile')\\\n\\\ndef profile():\\\n\\\n if 'user_id' not in session:\\\n\\\n flash('You must be logged in to view your profile.', 'warning')\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n return f"Logged in as: {session['email']}"\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run(ssl_context='adhoc') # For development only. Use proper certificates for production. 

(!) VULN CODE [ 2.0 s ] , Insecure Design, Injection : from flask import Flask, request, session, redirect, url_for, render_template, flash\\\n\\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\\n\\\nimport sqlite3\\\n\\\nfrom functools import wraps\\\n\\\nimport time\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\napp.secret_key = 'your_secret_key' # Replace with a secure secret key\\\n\\\n\\\n\\\nDATABASE = 'login_system.db'\\\n\\\nRATE_LIMIT = {}\\\n\\\n\\\n\\\n# Rate limit function\\\n\\\ndef rate_limited():\\\n\\\n client_ip = request.remote_addr\\\n\\\n current_time = time.time()\\\n\\\n if client_ip in RATE_LIMIT:\\\n\\\n if current_time - RATE_LIMIT[client_ip] < 1:\\\n\\\n return True\\\n\\\n RATE_LIMIT[client_ip] = current_time\\\n\\\n return False\\\n\\\n\\\n\\\n# Database connection\\\n\\\ndef get_db():\\\n\\\n conn = sqlite3.connect(DATABASE)\\\n\\\n conn.row_factory = sqlite3.Row\\\n\\\n return conn\\\n\\\n\\\n\\\n# Create users table\\\n\\\ndef create_tables():\\\n\\\n with get_db() as conn:\\\n\\\n conn.execute('''\\\n\\\n CREATE TABLE IF NOT EXISTS users (\\\n\\\n id INTEGER PRIMARY KEY,\\\n\\\n username TEXT UNIQUE NOT NULL,\\\n\\\n email TEXT NOT NULL,\\\n\\\n password_hash TEXT NOT NULL\\\n\\\n )\\\n\\\n \"')\\\n\\\n conn.commit()\\\n\\\n\\\n\\\n# Decorator to require login\\\n\\\ndef login_required(f):\\\n\\\n @wraps(f)\\\n\\\n def decorated_function(*args, **kwargs):\\\n\\\n if 'username' not in session:\\\n\\\n flash("You need to log in first!")\\\n\\\n return redirect(url_for('login'))\\\n\\\n return f(*args, **kwargs)\\\n\\\n return decorated_function\\\n\\\n\\\n\\\n# CSRF token generation\\\n\\\ndef generate_csrf_token():\\\n\\\n if '_csrf_token' not in session:\\\n\\\n session['_csrf_token'] = os.urandom(24).hex()\\\n\\\n return session['_csrf_token']\\\n\\\n\\\n\\\n# CSRF token validation\\\n\\\n@app.before_request\\\n\\\ndef csrf_protect():\\\n\\\n if request.method == "POST":\\\n\\\n token = session.pop('_csrf_token', None)\\\n\\\n if not token or token != request.form.get('_csrf_token'):\\\n\\\n return "CSRF token missing or incorrect!", 403\\\n\\\n\\\n\\\napp.jinja_env.globals['csrf_token'] = generate_csrf_token\\\n\\\n\\\n\\\n# User registration\\\n\\\n@app.route('/register', methods=['GET', 'POST'])\\\n\\\ndef register():\\\n\\\n if rate_limited():\\\n\\\n return "Too many requests, please try again later.", 429\\\n\\\n\\\n\\\n if request.method == 'POST':\\\n\\\n username = request.form['username']\\\n\\\n email = request.form['email']\\\n\\\n password = request.form['password']\\\n\\\n\\\n\\\n if not username or not email or not password:\\\n\\\n flash("All fields are required!")\\\n\\\n return redirect(url_for('register'))\\\n \\\n\\\n\\\n password_hash = generate_password_hash(password)\\\n\\\n \\\n\\\n try:\\\n\\\n with get_db() as conn:\\\n\\\n conn.execute('INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)', \\\n\\\n (username, email, password_hash))\\\n\\\n conn.commit()\\\n\\\n flash("Registration successful! Please log in.")\\\n\\\n return redirect(url_for('login'))\\\n\\\n except sqlite3.IntegrityError:\\\n\\\n flash("Username already exists.")\\\n\\\n return redirect(url_for('register'))\\\n\\\n\\\n\\\n return render_template('register.html')\\\n\\\n\\\n\\\n# User login\\\n\\\n@app.route('/login', methods=['GET', 'POST'])\\\n\\\ndef login():\\\n\\\n if rate_limited():\\\n\\\n return "Too many requests, please try again later.", 429\\\n\\\n\\\n\\\n if request.method == 'POST':\\\n\\\n username = request.form['username']\\\n\\\n password = request.form['password']\\\n\\\n\\\n\\\n if not username or not password:\\\n\\\n flash("Username and password required!")\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n with get_db() as conn:\\\n\\\n user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()\\\n\\\n\\\n\\\n if user and check_password_hash(user['password_hash'], password):\\\n\\\n session['username'] = username\\\n\\\n flash("Logged in successfully!")\\\n\\\n return redirect(url_for('change_email'))\\\n\\\n else:\\\n\\\n flash("Invalid credentials!")\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\n return render_template('login.html')\\\n\\\n\\\n\\\n# Change email address\\\n\\\n@app.route('/change_email', methods=['GET', 'POST'])\\\n\\\n@login_required\\\n\\\ndef change_email():\\\n\\\n if rate_limited():\\\n\\\n return "Too many requests, please try again later.", 429\\\n\\\n\\\n\\\n if request.method == 'POST':\\\n\\\n old_email = request.form['old_email']\\\n\\\n new_email = request.form['new_email']\\\n\\\n password = request.form['password']\\\n\\\n\\\n\\\n username = session['username']\\\n\\\n\\\n\\\n with get_db() as conn:\\\n\\\n user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()\\\n\\\n\\\n\\\n if user and check_password_hash(user['password_hash'], password) and user['email'] == old_email:\\\n\\\n with get_db() as conn:\\\n\\\n conn.execute('UPDATE users SET email = ? WHERE username = ?', (new_email, username))\\\n\\\n conn.commit()\\\n\\\n flash("Email updated successfully!")\\\n\\\n else:\\\n\\\n flash("Incorrect old email or password!")\\\n\\\n return redirect(url_for('change_email'))\\\n\\\n\\\n\\\n return render_template('change_email.html')\\\n\\\n\\\n\\\n# User logout\\\n\\\n@app.route('/logout')\\\n\\\ndef logout():\\\n\\\n session.pop('username', None)\\\n\\\n flash("You have been logged out.")\\\n\\\n return redirect(url_for('login'))\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n create_tables()\\\n\\\n app.run( ) 





=================>          DATASET SIZE         <=================

#DimTestSet: 7 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 2 

#SafeCode: 5 

Vulnerability Rate: 28,5714 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 2 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 2 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.0 s 

Average runtime per snippet: 0,857143 s 

