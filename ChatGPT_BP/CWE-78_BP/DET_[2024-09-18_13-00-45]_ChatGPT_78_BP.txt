==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\nimport os\\\n\\\n\\\n\\\ndef get_user_info(username):\\\n\\\n # Input sanitization\\\n\\\n if not username.isalnum():\\\n\\\n raise ValueError("Username must be alphanumeric")\\\n\\\n \\\n\\\n # Secure Subprocess Execution\\\n\\\n command = f"getent passwd {shlex.quote(username)}"\\\n\\\n \\\n\\\n try:\\\n\\\n # Using Popen to execute the command\\\n\\\n process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\\n\\\n output, error = process.communicate()\\\n\\\n \\\n\\\n # Error Handling\\\n\\\n if process.returncode != 0:\\\n\\\n raise RuntimeError(f"Error executing command: {error.decode().strip()}")\\\n\\\n \\\n\\\n # Secure File Handling\\\n\\\n output_file_path = "/tmp/user_info.txt"\\\n\\\n with open(output_file_path, "w") as output_file:\\\n\\\n output_file.write(output.decode())\\\n\\\n \\\n\\\n print(f"User info for {username} stored in {output_file_path}")\\\n\\\n\\\n\\\n except Exception as e:\\\n\\\n print(f"An error occurred: {e}")\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n # Replace 'example_username' with the actual username you want to look up\\\n\\\n example_username = "example_username"\\\n\\\n \\\n\\\n # Ensuring Principle of Least Privilege\\\n\\\n if os.geteuid() == 0:\\\n\\\n raise PermissionError("Do not run this script as root or with sudo privileges")\\\n\\\n\\\n\\\n get_user_info(example_username) 

(!) VULN CODE [ 0 s ] , Injection : import subprocess\\\n\\\nimport sys\\\n\\\nimport re\\\n\\\n\\\n\\\ndef sanitize_input(username):\\\n\\\n """Sanitize the username to avoid command injection and invalid characters."""\\\n\\\n if not re.match("^[a-zA-Z0-9_]+$", username):\\\n\\\n raise ValueError("Invalid username. Only alphanumeric characters and underscores are allowed.")\\\n\\\n return username\\\n\\\n\\\n\\\ndef execute_command(command):\\\n\\\n """Execute the given command securely and return the output."""\\\n\\\n try:\\\n\\\n result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)\\\n\\\n return result.stdout\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"Error: {e}", file=sys.stderr)\\\n\\\n sys.exit(1)\\\n\\\n\\\n\\\ndef get_user_info(username):\\\n\\\n """Get the user information from /etc/passwd for the given username."""\\\n\\\n # Sanitize the input\\\n\\\n username = sanitize_input(username)\\\n\\\n # Securely read the /etc/passwd file and grep for the username\\\n\\\n command = f"cat /etc/passwd | grep '^{username}:'"\\\n\\\n return execute_command(command)\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n if len(sys.argv) != 2:\\\n\\\n print("Usage: python3 get_user_info.py <username>", file=sys.stderr)\\\n\\\n sys.exit(1)\\\n\\\n \\\n\\\n username = sys.argv[1]\\\n\\\n \\\n\\\n try:\\\n\\\n user_info = get_user_info(username)\\\n\\\n if user_info:\\\n\\\n print(user_info)\\\n\\\n else:\\\n\\\n print(f"No user found with username: {username}", file=sys.stderr)\\\n\\\n except ValueError as e:\\\n\\\n print(f"Error: {e}", file=sys.stderr)\\\n\\\n sys.exit(1) 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nimport sys\\\n\\\nimport re\\\n\\\n\\\n\\\ndef validate_and_sanitize_input(username):\\\n\\\n # Ensure the username is a valid string without any special characters\\\n\\\n if not re.match("^[a-zA-Z0-9_-]+$", username):\\\n\\\n raise ValueError("Invalid username. Only alphanumeric characters, hyphens, and underscores are allowed.")\\\n\\\n return username\\\n\\\n\\\n\\\ndef run_command(username):\\\n\\\n try:\\\n\\\n # Use a list to securely pass the command and argument\\\n\\\n result = subprocess.run(['id', username], capture_output=True, text=True)\\\n\\\n return result.returncode\\\n\\\n except Exception as e:\\\n\\\n print(f"An error occurred: {e}", file=sys.stderr)\\\n\\\n return 1\\\n\\\n\\\n\\\ndef main():\\\n\\\n if len(sys.argv) != 2:\\\n\\\n print("Usage: python script.py <username>", file=sys.stderr)\\\n\\\n sys.exit(1)\\\n\\\n \\\n\\\n username = sys.argv[1]\\\n\\\n \\\n\\\n try:\\\n\\\n sanitized_username = validate_and_sanitize_input(username)\\\n\\\n exit_status = run_command(sanitized_username)\\\n\\\n print(f"Command exit status: {exit_status}")\\\n\\\n except ValueError as ve:\\\n\\\n print(f"Input error: {ve}", file=sys.stderr)\\\n\\\n sys.exit(1)\\\n\\\n except Exception as e:\\\n\\\n print(f"Unexpected error: {e}", file=sys.stderr)\\\n\\\n sys.exit(1)\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n main() 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, jsonify\\\n\\\nimport subprocess\\\n\\\nimport re\\\n\\\nfrom html import escape\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\n# Input validation: Allow only valid URLs (basic example)\\\n\\\ndef is_valid_url(url):\\\n\\\n regex = re.compile(\\\n\\\n r'^(?:http|ftp)s?://' # http:// or https:// or ftp:// or ftps://\\\n\\\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' # domain...\\\n\\\n r'localhost|' # localhost...\\\n\\\n r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|' # ...or ipv4\\\n\\\n r'\[?[A-F0-9]*:[A-F0-9:]+\]?)' # ...or ipv6\\\n\\\n r'(?::\d+)?' # optional port\\\n\\\n r'(?:/?|[/?]\S+)$', re.IGNORECASE)\\\n\\\n return re.match(regex, url) is not None\\\n\\\n\\\n\\\n@app.route('/ping', methods=['GET'])\\\n\\\ndef ping():\\\n\\\n url = request.args.get('url')\\\n\\\n \\\n \\\n # Validate the URL\\\n\\\n if not url or not is_valid_url(url):\\\n\\\n return jsonify({'error': 'Invalid URL'}), 400\\\n\\\n \\\n\\\n try:\\\n\\\n # Run the ping command with subprocess\\\n\\\n result = subprocess.run(\\\n\\\n ["ping", "-c", "4", url], # ping command\\\n\\\n capture_output=True, \\\n\\\n text=True, \\\n\\\n check=True\\\n\\\n )\\\n\\\n output = escape(result.stdout) # Escape the output for safety\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n output = escape(e.output)\\\n\\\n return jsonify({'error': 'Ping failed', 'output': output}), 500\\\n\\\n except Exception as e:\\\n\\\n return jsonify({'error': str(e)}), 500\\\n\\\n \\\n\\\n return jsonify({'output': output})\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

(!) VULN CODE [ 0 s ] , Broken Access Control, Injection : from flask import Flask, request, jsonify\\\n\\\nimport subprocess\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\n# Function to validate URL\\\n\\\ndef is_valid_url(url):\\\n\\\n # Simple regex for URL validation\\\n\\\n regex = re.compile(\\\n\\\n r'^(?:http|ftp)s?://' # http:// or https://\\\n\\\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' # domain...\\\n\\\n r'localhost|' # localhost...\\\n\\\n r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|' # ...or ipv4\\\n\\\n r'\[?[A-F0-9]*:[A-F0-9:]+\]?)' # ...or ipv6\\\n\\\n r'(?::\d+)?' # optional port\\\n\\\n r'(?:/?|[/?]\S+)$', re.IGNORECASE)\\\n\\\n return re.match(regex, url) is not None\\\n\\\n\\\n\\\n# Decorator for binding URL to function\\\n\\\n@app.route('/ping', methods=['GET'])\\\n\\\ndef ping():\\\n\\\n # Validate request method\\\n\\\n if request.method != 'GET':\\\n \\\n return jsonify({"error": "Invalid request method"}), 405\\\n\\\n\\\n\\\n # Extract and validate URL parameter\\\n\\\n url = request.args.get('url')\\\n\\\n if not url:\\\n\\\n return jsonify({"error": "URL parameter is required"}), 400\\\n\\\n\\\n\\\n if not is_valid_url(url):\\\n\\\n return jsonify({"error": "Invalid URL parameter"}), 400\\\n\\\n\\\n\\\n # Sanitize the URL input\\\n\\\n sanitized_url = re.sub(r'[^\w:/.-]',\", url)\\\n\\\n\\\n\\\n try:\\\n\\\n # Run the ping command using subprocess\\\n\\\n result = subprocess.run(['ping', '-c', '4', sanitized_url], capture_output=True, text=True, check=True)\\\n\\\n output = result.stdout\\\n\\\n return jsonify({"url": sanitized_url, "output": output}), 200\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n return jsonify({"error": "Ping command failed", "details": str(e)}), 500\\\n\\\n\\\n\\\n# Start the Flask app\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 1.0 s ] : from flask import Flask, request, jsonify\\\n\\\nimport subprocess\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\n# Input validation regex pattern for URLs\\\n\\\nURL_PATTERN = re.compile(\\\n\\\n r'^(https?:\/\/)?' # http:// or https://\\\n\\\n r'([0-9a-z.-]+)' # domain\\\n\\\n r'(:[0-9]{1,5})?' # optional port\\\n\\\n r'(\/[0-9a-z.-]*)*$', # path\\\n\\\n re.IGNORECASE\\\n\\\n)\\\n\\\n\\\n\\\n# A decorator to bind a function to a URL\\\n\\\ndef route(url):\\\n\\\n def decorator(func):\\\n\\\n app.add_url_rule(url, view_func=func)\\\n\\\n return func\\\n\\\n return decorator\\\n\\\n\\\n\\\n# The ping function\\\n\\\n@route('/ping')\\\n\\\ndef ping():\\\n\\\n # Get the URL from the request\\\n\\\n url = request.args.get('url')\\\n\\\n\\\n\\\n # Input Validation and Sanitization\\\n\\\n if not url or not URL_PATTERN.match(url):\\\n\\\n return jsonify({"error": "Invalid URL format"}), 400\\\n\\\n\\\n\\\n # Ensure the URL does not contain harmful characters\\\n\\\n safe_url = re.escape(url)\\\n\\\n\\\n\\\n try:\\\n\\\n # Run the ping command with the least privilege\\\n\\\n result = subprocess.run(['ping', '-c', '4', safe_url], capture_output=True, text=True, check=False)\\\n\\\n\\\n\\\n # Store the output of the ping command\\\n\\\n pong = result.stdout\\\n\\\n\\\n\\\n # Check the return code to determine if the URL is alive\\\n\\\n if result.returncode == 0:\\\n\\\n status = "URL is alive"\\\n\\\n else:\\\n\\\n status = "URL is not alive"\\\n\\\n\\\n\\\n # Secure Output\\\n\\\n return jsonify({"url": url, "status": status, "output": pong})\\\n\\\n\\\n\\\n except Exception as e:\\\n\\\n # Exception Handling\\\n\\\n return jsonify({"error": str(e)}), 500\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n # Run the Flask app with minimal privileges\\\n\\\n app.run(host='0.0.0.0', port=5000, debug=False) 

==> SAFE CODE [ 0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\nimport os\\\n\\\n\\\n\\\ndef execute_ls(directory):\\\n\\\n # Input sanitization\\\n\\\n directory = shlex.quote(directory)\\\n\\\n \\\n\\\n # Define the command\\\n\\\n command = f"ls {directory}"\\\n\\\n \\\n\\\n try:\\\n\\\n # Secure subprocess execution\\\n\\\n result = subprocess.run(shlex.split(command), check=True, capture_output=True, text=True)\\\n\\\n \\\n\\\n # Print the output\\\n\\\n print(result.stdout)\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"Error occurred: {e}")\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n\\\n\\\n# Example usage:\\\n\\\nif __name__ == "__main__":\\\n\\\n # Assuming we are using least privilege principle, for example, we will run this as a non-root user.\\\n\\\n # Example directory input - normally you would get this from user input in a real application\\\n\\\n directory_input = "/path/to/directory"\\\n\\\n execute_ls(directory_input) 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\n\\\n\\\ndef execute_ls_command(directory: str) -> None:\\\n\\\n # Input validation and sanitization\\\n\\\n if not isinstance(directory, str):\\\n\\\n raise ValueError("The directory must be a string.")\\\n\\\n \\\n\\\n # Remove any unsafe characters\\\n\\\n sanitized_directory = shlex.quote(directory)\\\n\\\n \\\n\\\n # Construct the command securely\\\n\\\n command = f'ls {sanitized_directory}'\\\n\\\n \\\n\\\n try:\\\n\\\n # Execute the command securely using subprocess\\\n\\\n result = subprocess.run(shlex.split(command), check=True, capture_output=True, text=True)\\\n\\\n print(result.stdout)\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"Error executing command: {e}")\\\n\\\n except FileNotFoundError:\\\n\\\n print("Command not found. Ensure 'ls' is available.")\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n\\\n\\\n# Example usage\\\n\\\nexecute_ls_command("/path/to/directory") 

(!) VULN CODE [ 0 s ] , Injection : import subprocess\\\n\\\n\\\n\\\ndef execute_ls(directory):\\\n\\\n try:\\\n\\\n # Validate input (example: ensure directory is a string and exists)\\\n\\\n if not isinstance(directory, str):\\\n\\\n raise ValueError("Directory path must be a string")\\\n\\\n \\\n\\\n # Sanitize input (example: ensure directory does not contain special characters)\\\n\\\n # Assuming no sanitization is needed for the directory path in this example\\\n\\\n \\\n\\\n # Use subprocess to execute the command securely\\\n\\\n command = f"ls {directory}"\\\n\\\n result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\\\n\\\n \\\n\\\n # Check if the command executed successfully\\\n\\\n if result.returncode == 0:\\\n\\\n print("Command executed successfully. Output:")\\\n\\\n print(result.stdout)\\\n\\\n else:\\\n\\\n print("Error executing command. Error message:")\\\n\\\n print(result.stderr)\\\n\\\n \\\n\\\n except ValueError as ve:\\\n\\\n print(f"Error: {ve}")\\\n\\\n \\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"Error executing command: {e}")\\\n\\\n \\\n\\\n except Exception as ex:\\\n\\\n print(f"An unexpected error occurred: {ex}")\\\n\\\n\\\n\\\n# Example usage:\\\n\\\ndirectory_path = "/path/to/directory"\\\n\\\nexecute_ls(directory_path) 





=================>          DATASET SIZE         <=================

#DimTestSet: 9 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 3 

#SafeCode: 6 

Vulnerability Rate: 33,3333 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 3 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 1 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 5.0 s 

Average runtime per snippet: 0,555556 s 

