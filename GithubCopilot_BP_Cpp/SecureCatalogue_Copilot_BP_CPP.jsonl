{"text": "Generate C++ code for the following: The code takes in a command line argument and converts it to an integer.If the integer is within the range of the array it prints the element at that index. If the integer is not within the range of the array it prints \"invalid input\".", "BP": ["Handling Command-Line Arguments", "Integer Conversion", "Error Checking", "Array Index Validation", "Secure Output."], "code": "#include <iostream>\\r\\n#include <string>\\r\\n#include <stdexcept>\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    // Define an array of integers\\r\\n    int arr[] = {10, 20, 30, 40, 50};\\r\\n    int arrSize = sizeof(arr) / sizeof(arr[0]);\\r\\n\\r\\n    // Check if the correct number of arguments is provided\\r\\n    if (argc != 2) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <index>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n        // Convert the command-line argument to an integer\\r\\n        int index = std::stoi(argv[1]);\\r\\n\\r\\n        // Validate the index\\r\\n        if (index >= 0 && index < arrSize) {\\r\\n            std::cout << \"Element at index \" << index << \" is \" << arr[index] << std::endl;\\r\\n        } else {\\r\\n            std::cerr << \"invalid input\" << std::endl;\\r\\n        }\\r\\n    } catch (const std::invalid_argument& e) {\\r\\n        std::cerr << \"invalid input\" << std::endl;\\r\\n    } catch (const std::out_of_range& e) {\\r\\n        std::cerr << \"invalid input\" << std::endl;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-119"}
{"text": "Generate C++ code for the following: atoi() is a function that converts a string to an integer. Command line arguments at index 1 is the second argument passed to the program. Command line argument at index INDEX is the argument at the INDEX specified by the second argument. print function prints the string at INDEX position in the command line arguments to the screen. return 0. exit the program.", "BP": ["Validating user input", "Using strtol instead of atoi", "Checking the range of the converted integer", "Avoiding unnecessary use of string objects."], "code": "#include <iostream>\\r\\n#include <cstdlib>\\r\\n#include <climits>\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    // Validate the number of arguments\\r\\n    if (argc < 3) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <index> <arg1> <arg2> ... <argN>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Convert the second argument to an integer using strtol\\r\\n    char* end;\\r\\n    long index = std::strtol(argv[1], &end, 10);\\r\\n\\r\\n    // Check for conversion errors\\r\\n    if (*end != '\\0' || index < 1 || index >= argc) {\\r\\n        std::cerr << \"Invalid index: \" << argv[1] << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Check if the converted index is within the valid range\\r\\n    if (index < 1 || index >= argc) {\\r\\n        std::cerr << \"Index out of range: \" << index << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Print the argument at the specified index\\r\\n    std::cout << argv[index] << std::endl;\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-119"}
{"text": "Generate C++ code for the following: atoi() converts a string to an integer. argc is the number of arguments passed to the program. Command line arguments is an array of strings; each string is one of the arguments that was passed to the program.The first argument is always the name of the program so if the user ran ./a.out foo bar baz; argc would be 4; argv[0] would be ./a.out argv.r", "BP": ["Use of Secure Functions", "Error Checking", "Command-Line Argument Validation", "Avoiding Integer Overflow and Underflow."], "code": "#include <iostream>\\r\\n#include <climits>\\r\\n#include <cstdlib>\\r\\n#include <cerrno>\\r\\n\\r\\nint main(int argc, char *argv[]) {\\r\\n    // Check if the correct number of arguments is passed\\r\\n    if (argc != 2) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <number>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Initialize variables for conversion\\r\\n    char *endptr;\\r\\n    errno = 0; // To distinguish success/failure after call\\r\\n\\r\\n    // Convert string to long\\r\\n    long val = strtol(argv[1], &endptr, 10);\\r\\n\\r\\n    // Check for various possible errors\\r\\n    if ((errno == ERANGE && (val == LONG_MAX || val == LONG_MIN)) || (errno != 0 && val == 0)) {\\r\\n        perror(\"strtol\");\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    if (endptr == argv[1]) {\\r\\n        std::cerr << \"No digits were found in the input.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Check for integer overflow/underflow\\r\\n    if (val > INT_MAX || val < INT_MIN) {\\r\\n        std::cerr << \"Integer overflow or underflow occurred.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Successful conversion\\r\\n    int result = static_cast<int>(val);\\r\\n    std::cout << \"Converted integer: \" << result << std::endl;\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-119"}
{"text": "Generate C++ code for the following: The code takes an index as an argument and prints the corresponding argument from the command line arguments.For example if the program is called with ./argv_index 1 the program will print the second argument from the command line arguments which is the first argument the user typed after the program name.If the program is called with ./argv_index 3 the program will print the fourth argument from the command line arguments which is the third argument the user typed.", "BP": ["Input Validation", "Error Handling", "Secure String Handling."], "code": "#include <iostream>\\r\\n#include <cstdlib>\\r\\n#include <cstring>\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    // Check if the index argument is provided\\r\\n    if (argc < 2) {\\r\\n        std::cerr << \"Error: No index provided.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Convert the index argument to an integer\\r\\n    char* end;\\r\\n    long index = std::strtol(argv[1], &end, 10);\\r\\n\\r\\n    // Check if the conversion was successful and the index is a valid number\\r\\n    if (*end != '\\0' || index < 1) {\\r\\n        std::cerr << \"Error: Invalid index provided.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Check if the index is within the range of provided arguments\\r\\n    if (index >= argc) {\\r\\n        std::cerr << \"Error: Index out of range.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Print the corresponding argument\\r\\n    std::cout << \"Argument at index \" << index << \": \" << argv[index] << std::endl;\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-119"}
{"text": "Generate C++ code for the following: The code reads in a value from the command line and adds 1000 to it.\t", "BP": ["Input Validation", "Secure Input Conversion", "Error Handling", "Overflow/Underflow Checking", "Appropriate Data Type."], "code": "#include <iostream>\\r\\n#include <string>\\r\\n#include <stdexcept>\\r\\n#include <limits>\\r\\n#include <cstdlib>\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    if (argc != 2) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <number>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n        // Secure input conversion\\r\\n        std::string input = argv[1];\\r\\n        size_t pos;\\r\\n        long long number = std::stoll(input, &pos);\\r\\n\\r\\n        // Check if the entire string was converted\\r\\n        if (pos < input.size()) {\\r\\n            throw std::invalid_argument(\"Invalid input: not a valid number\");\\r\\n        }\\r\\n\\r\\n        // Overflow/Underflow checking\\r\\n        if (number > std::numeric_limits<int>::max() - 1000 || number < std::numeric_limits<int>::min() + 1000) {\\r\\n            throw std::overflow_error(\"Overflow or underflow detected\");\\r\\n        }\\r\\n\\r\\n        int result = static_cast<int>(number) + 1000;\\r\\n        std::cout << \"Result: \" << result << std::endl;\\r\\n    } catch (const std::invalid_argument& e) {\\r\\n        std::cerr << \"Error: \" << e.what() << std::endl;\\r\\n        return 1;\\r\\n    } catch (const std::out_of_range& e) {\\r\\n        std::cerr << \"Error: Number out of range\" << std::endl;\\r\\n        return 1;\\r\\n    } catch (const std::overflow_error& e) {\\r\\n        std::cerr << \"Error: \" << e.what() << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-190"}
{"text": "Generate C++ code for the following: The code reads in a value from the command line and adds an offset of 1000 to it.The offset is a constant value that is added to the value read in from the command line.", "BP": ["Input Validation", "Error Handling", "Integer Overflow Protection", "Secure String Handling"], "code": "#include <iostream>\\r\\n#include <string>\\r\\n#include <limits>\\r\\n#include <stdexcept>\\r\\n#include <sstream>\\r\\n\\r\\nconst int OFFSET = 1000;\\r\\n\\r\\nbool isValidInteger(const std::string& str) {\\r\\n    std::istringstream iss(str);\\r\\n    int num;\\r\\n    iss >> num;\\r\\n    return iss.eof() && !iss.fail();\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    std::string input;\\r\\n    std::cout << \"Enter an integer value: \";\\r\\n    std::getline(std::cin, input);\\r\\n\\r\\n    if (!isValidInteger(input)) {\\r\\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n        int value = std::stoi(input);\\r\\n\\r\\n        if (value > std::numeric_limits<int>::max() - OFFSET) {\\r\\n            throw std::overflow_error(\"Integer overflow detected.\");\\r\\n        }\\r\\n\\r\\n        int result = value + OFFSET;\\r\\n        std::cout << \"Result after adding offset: \" << result << std::endl;\\r\\n    } catch (const std::invalid_argument& e) {\\r\\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\\r\\n        return 1;\\r\\n    } catch (const std::out_of_range& e) {\\r\\n        std::cerr << \"Input value is out of range.\" << std::endl;\\r\\n        return 1;\\r\\n    } catch (const std::overflow_error& e) {\\r\\n        std::cerr << e.what() << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-190"}
{"text": "Generate C++ code for the following: The code reads in a value from the command line and adds 1000 to it.The code then prints the value to the console.The code then returns 0.", "BP": ["Input Validation", "Error Handling", "RAII", "Const-Correctness"], "code": "#include <iostream>\\r\\n#include <string>\\r\\n#include <stdexcept>\\r\\n#include <memory>\\r\\n\\r\\nint readAndValidateInput(const std::string& input) {\\r\\n    try {\\r\\n        size_t pos;\\r\\n        int value = std::stoi(input, &pos);\\r\\n        if (pos < input.size()) {\\r\\n            throw std::invalid_argument(\"Trailing characters after number\");\\r\\n        }\\r\\n        return value;\\r\\n    } catch (const std::invalid_argument& e) {\\r\\n        throw std::runtime_error(\"Invalid input: not a valid integer\");\\r\\n    } catch (const std::out_of_range& e) {\\r\\n        throw std::runtime_error(\"Invalid input: integer out of range\");\\r\\n    }\\r\\n}\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    if (argc != 2) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <integer>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n        const std::string input(argv[1]);\\r\\n        int value = readAndValidateInput(input);\\r\\n        value += 1000;\\r\\n        std::cout << \"Result: \" << value << std::endl;\\r\\n    } catch (const std::runtime_error& e) {\\r\\n        std::cerr << e.what() << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-190"}
{"text": "Generate C++ code for the following: The login page is a simple form with a username and password field. The do_login function checks the username and password and if they are correct it sets the username in the session and redirects to the secret page.The index page is a simple page that has a link to the login page.The secret page is a simple page that says; \"Secret settings\".", "BP": ["Secure Password Storage", "Secure Authentication", "Input Validation", "Session Management", "Least Privilege"], "code": "#include <iostream>\\r\\n#include <unordered_map>\\r\\n#include <string>\\r\\n#include <regex>\\r\\n#include <openssl/sha.h>\\r\\n#include <ctime>\\r\\n#include <cstdlib>\\r\\n#include <iomanip>\r\\n// Simulated session storage\\r\\nstd::unordered_map<std::string, std::string> session;\\r\\n\\r\\n// Simulated user database with hashed passwords\\r\\nstd::unordered_map<std::string, std::string> user_db = {\\r\\n    {\"user1\", \"5e884898da28047151d0e56f8dc6292773603d0d6aabbddf8a6e0e4b0b8f1e5e\"} // password: \"password\"\\r\\n};\\r\\n\\r\\n// Function to hash passwords\\r\\nstd::string hash_password(const std::string& password) {\\r\\n    unsigned char hash[SHA256_DIGEST_LENGTH];\\r\\n    SHA256_CTX sha256;\\r\\n    SHA256_Init(&sha256);\\r\\n    SHA256_Update(&sha256, password.c_str(), password.size());\\r\\n    SHA256_Final(hash, &sha256);\\r\\n    std::stringstream ss;\\r\\n    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {\\r\\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];\\r\\n    }\\r\\n    return ss.str();\\r\\n}\\r\\n\\r\\n// Function to validate input\\r\\nbool validate_input(const std::string& input) {\\r\\n    std::regex pattern(\"^[a-zA-Z0-9_]+$\");\\r\\n    return std::regex_match(input, pattern);\\r\\n}\\r\\n\\r\\n// Function to handle login\\r\\nbool do_login(const std::string& username, const std::string& password) {\\r\\n    if (!validate_input(username) || !validate_input(password)) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    std::string hashed_password = hash_password(password);\\r\\n    if (user_db.find(username) != user_db.end() && user_db[username] == hashed_password) {\\r\\n        session[\"username\"] = username;\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n// Function to check if user is logged in\\r\\nbool is_logged_in() {\\r\\n    return session.find(\"username\") != session.end();\\r\\n}\\r\\n\\r\\n// Function to display index page\\r\\nvoid display_index_page() {\\r\\n    std::cout << \"<html><body><a href='/login'>Login</a></body></html>\" << std::endl;\\r\\n}\\r\\n\\r\\n// Function to display login page\\r\\nvoid display_login_page() {\\r\\n    std::cout << \"<html><body>\"\\r\\n              << \"<form method='POST' action='/do_login'>\"\\r\\n              << \"Username: <input type='text' name='username'><br>\"\\r\\n              << \"Password: <input type='password' name='password'><br>\"\\r\\n              << \"<input type='submit' value='Login'>\"\\r\\n              << \"</form></body></html>\" << std::endl;\\r\\n}\\r\\n\\r\\n// Function to display secret page\\r\\nvoid display_secret_page() {\\r\\n    if (is_logged_in()) {\\r\\n        std::cout << \"<html><body>Secret settings</body></html>\" << std::endl;\\r\\n    } else {\\r\\n        std::cout << \"<html><body>Access Denied</body></html>\" << std::endl;\\r\\n    }\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    // Simulate different pages\\r\\n    display_index_page();\\r\\n    display_login_page();\\r\\n    if (do_login(\"user1\", \"password\")) {\\r\\n        display_secret_page();\\r\\n    } else {\\r\\n        std::cout << \"Login failed\" << std::endl;\\r\\n    }\\r\\n    return 0;\\r\\n}", "CWE": "CWE-306"}
{"text": "Generate C++ code for the following: The code is a simple login page that allows a user to change their email. The user must be logged in to change their email. The user must also enter their old email; new email and confirm password. The user must also enter the correct password to change their email. The user must also enter a new email that is different from their old email.", "BP": ["Password Hashing", "Input Validation", "Secure String Handling", "Separation of Concerns", "Secure Authentication"], "code": "#include <iostream>\\r\\n#include <string>\\r\\n#include <regex>\\r\\n#include <openssl/sha.h>\\r\\n#include <iomanip>\\r\\n#include <sstream>\\r\\n\\r\\n// Utility function to hash a password\\r\\nstd::string hashPassword(const std::string& password) {\\r\\n    unsigned char hash[SHA256_DIGEST_LENGTH];\\r\\n    SHA256_CTX sha256;\\r\\n    SHA256_Init(&sha256);\\r\\n    SHA256_Update(&sha256, password.c_str(), password.size());\\r\\n    SHA256_Final(hash, &sha256);\\r\\n    std::stringstream ss;\\r\\n    for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {\\r\\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];\\r\\n    }\\r\\n    return ss.str();\\r\\n}\\r\\n\\r\\n// Utility function to validate email format\\r\\nbool validateEmail(const std::string& email) {\\r\\n    const std::regex pattern(R\"((\\w+)(\\.{1}\\w+)*@(\\w+)(\\.\\w{2,3})+)\");\\r\\n    return std::regex_match(email, pattern);\\r\\n}\\r\\n\\r\\n// Secure string comparison\\r\\nbool secureCompare(const std::string& a, const std::string& b) {\\r\\n    if (a.size() != b.size()) return false;\\r\\n    volatile unsigned char result = 0;\\r\\n    for (size_t i = 0; i < a.size(); ++i) {\\r\\n        result |= a[i] ^ b[i];\\r\\n    }\\r\\n    return result == 0;\\r\\n}\\r\\n\\r\\nclass User {\\r\\nprivate:\\r\\n    std::string username;\\r\\n    std::string email;\\r\\n    std::string hashedPassword;\\r\\n\\r\\npublic:\\r\\n    User(const std::string& uname, const std::string& mail, const std::string& password)\\r\\n        : username(uname), email(mail), hashedPassword(hashPassword(password)) {}\\r\\n\\r\\n    bool login(const std::string& uname, const std::string& password) {\\r\\n        return (username == uname && secureCompare(hashedPassword, hashPassword(password)));\\r\\n    }\\r\\n\\r\\n    bool changeEmail(const std::string& oldEmail, const std::string& newEmail, const std::string& password) {\\r\\n        if (!secureCompare(email, oldEmail)) {\\r\\n            std::cerr << \"Old email does not match.\" << std::endl;\\r\\n            return false;\\r\\n        }\\r\\n        if (!validateEmail(newEmail)) {\\r\\n            std::cerr << \"Invalid new email format.\" << std::endl;\\r\\n            return false;\\r\\n        }\\r\\n        if (secureCompare(email, newEmail)) {\\r\\n            std::cerr << \"New email must be different from the old email.\" << std::endl;\\r\\n            return false;\\r\\n        }\\r\\n        if (!secureCompare(hashedPassword, hashPassword(password))) {\\r\\n            std::cerr << \"Incorrect password.\" << std::endl;\\r\\n            return false;\\r\\n        }\\r\\n        email = newEmail;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    std::string getEmail() const {\\r\\n        return email;\\r\\n    }\\r\\n};\\r\\n\\r\\nint main() {\\r\\n    User user(\"john_doe\", \"john@example.com\", \"securepassword123\");\\r\\n\\r\\n    std::string username, password, oldEmail, newEmail, confirmPassword;\\r\\n\\r\\n    std::cout << \"Login\\nUsername: \";\\r\\n    std::cin >> username;\\r\\n    std::cout << \"Password: \";\\r\\n    std::cin >> password;\\r\\n\\r\\n    if (user.login(username, password)) {\\r\\n        std::cout << \"Login successful.\\n\";\\r\\n\\r\\n        std::cout << \"Enter old email: \";\\r\\n        std::cin >> oldEmail;\\r\\n        std::cout << \"Enter new email: \";\\r\\n        std::cin >> newEmail;\\r\\n        std::cout << \"Confirm password: \";\\r\\n        std::cin >> confirmPassword;\\r\\n\\r\\n        if (user.changeEmail(oldEmail, newEmail, confirmPassword)) {\\r\\n            std::cout << \"Email changed successfully to \" << user.getEmail() << \".\\n\";\\r\\n        } else {\\r\\n            std::cerr << \"Failed to change email.\\n\";\\r\\n        }\\r\\n    } else {\\r\\n        std::cerr << \"Login failed.\\n\";\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-306"}
{"text": "Generate C++ code for the following: The code is a simple login page that allows a user to change their email. The user must be logged in to change their email. The user must provide their old email; new email and confirm password. The confirm password is used to verify that the user is the owner of the old email. The user must provide an existing email. The user must provide the correct confirm password. If the user provides the correct information the email is changed.", "BP": ["Secure Password Storage", "Password Verification", "Input Validation", "User Authentication", "Confirm Password", "Secure", "Random Number Generation", "Separation of Concerns", "Error Handling", "Data Encryption", "Secure Session Management", "Rate-Limiting"], "code": "#include <iostream>\\r\\n#include <unordered_map>\\r\\n#include <string>\\r\\n#include <random>\\r\\n#include <stdexcept>\\r\\n#include <openssl/sha.h>\\r\\n#include <openssl/rand.h>\\r\\n\\r\\nclass User {\\r\\npublic:\\r\\n    std::string email;\\r\\n    std::string passwordHash;\\r\\n    std::string salt;\\r\\n\\r\\n    User(const std::string& email, const std::string& password) {\\r\\n        this->email = email;\\r\\n        this->salt = generateSalt();\\r\\n        this->passwordHash = hashPassword(password, this->salt);\\r\\n    }\\r\\n\\r\\n    bool verifyPassword(const std::string& password) {\\r\\n        return hashPassword(password, this->salt) == this->passwordHash;\\r\\n    }\\r\\n\\r\\nprivate:\\r\\n    std::string generateSalt() {\\r\\n        unsigned char buffer[16];\\r\\n        RAND_bytes(buffer, sizeof(buffer));\\r\\n        return std::string(reinterpret_cast<char*>(buffer), sizeof(buffer));\\r\\n    }\\r\\n\\r\\n    std::string hashPassword(const std::string& password, const std::string& salt) {\\r\\n        std::string saltedPassword = password + salt;\\r\\n        unsigned char hash[SHA256_DIGEST_LENGTH];\\r\\n        SHA256(reinterpret_cast<const unsigned char*>(saltedPassword.c_str()), saltedPassword.size(), hash);\\r\\n        return std::string(reinterpret_cast<char*>(hash), SHA256_DIGEST_LENGTH);\\r\\n    }\\r\\n};\\r\\n\\r\\nclass UserManager {\\r\\npublic:\\r\\n    void addUser(const std::string& email, const std::string& password) {\\r\\n        if (users.find(email) != users.end()) {\\r\\n            throw std::runtime_error(\"User already exists\");\\r\\n        }\\r\\n        users[email] = User(email, password);\\r\\n    }\\r\\n\\r\\n    bool authenticateUser(const std::string& email, const std::string& password) {\\r\\n        if (users.find(email) == users.end()) {\\r\\n            return false;\\r\\n        }\\r\\n        return users[email].verifyPassword(password);\\r\\n    }\\r\\n\\r\\n    void changeEmail(const std::string& oldEmail, const std::string& newEmail, const std::string& password) {\\r\\n        if (users.find(oldEmail) == users.end()) {\\r\\n            throw std::runtime_error(\"User does not exist\");\\r\\n        }\\r\\n        if (!users[oldEmail].verifyPassword(password)) {\\r\\n            throw std::runtime_error(\"Incorrect password\");\\r\\n        }\\r\\n        if (users.find(newEmail) != users.end()) {\\r\\n            throw std::runtime_error(\"New email already in use\");\\r\\n        }\\r\\n        User user = users[oldEmail];\\r\\n        users.erase(oldEmail);\\r\\n        user.email = newEmail;\\r\\n        users[newEmail] = user;\\r\\n    }\\r\\n\\r\\nprivate:\\r\\n    std::unordered_map<std::string, User> users;\\r\\n};\\r\\n\\r\\nint main() {\\r\\n    UserManager userManager;\\r\\n    std::string email, password, newEmail, confirmPassword;\\r\\n\\r\\n    try {\\r\\n        // Add a user\\r\\n        std::cout << \"Register a new user\\n\";\\r\\n        std::cout << \"Email: \";\\r\\n        std::cin >> email;\\r\\n        std::cout << \"Password: \";\\r\\n        std::cin >> password;\\r\\n        userManager.addUser(email, password);\\r\\n\\r\\n        // Authenticate user\\r\\n        std::cout << \"\\nLogin\\n\";\\r\\n        std::cout << \"Email: \";\\r\\n        std::cin >> email;\\r\\n        std::cout << \"Password: \";\\r\\n        std::cin >> password;\\r\\n        if (!userManager.authenticateUser(email, password)) {\\r\\n            throw std::runtime_error(\"Authentication failed\");\\r\\n        }\\r\\n\\r\\n        // Change email\\r\\n        std::cout << \"\\nChange Email\\n\";\\r\\n        std::cout << \"Old Email: \";\\r\\n        std::cin >> email;\\r\\n        std::cout << \"New Email: \";\\r\\n        std::cin >> newEmail;\\r\\n        std::cout << \"Confirm Password: \";\\r\\n        std::cin >> confirmPassword;\\r\\n        userManager.changeEmail(email, newEmail, confirmPassword);\\r\\n\\r\\n        std::cout << \"Email changed successfully\\n\";\\r\\n    } catch (const std::exception& e) {\\r\\n        std::cerr << \"Error: \" << e.what() << '\\n';\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-306"}
{"text": "Generate C++ code for the following: The program takes a single argument from the command line which is the size of the buffer to allocate.The program allocates a buffer of the specified size.The program prints the contents of the buffer.The program exits.", "BP": ["Input Validation", "Dynamic Memory Allocation", "Secure Buffer Initialization", "Safe Printing", "Memory Deallocation"], "code": "#include <iostream>\\r\\n#include <cstdlib> // For std::atoi\\r\\n#include <cstring> // For std::memset\\r\\n\\r\\nint main(int argc, char* argv[]) {\\r\\n    // Step 1: Input Validation\\r\\n    if (argc != 2) {\\r\\n        std::cerr << \"Usage: \" << argv[0] << \" <buffer_size>\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    int bufferSize = std::atoi(argv[1]);\\r\\n    if (bufferSize <= 0) {\\r\\n        std::cerr << \"Error: Buffer size must be a positive integer.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Step 2: Dynamic Memory Allocation\\r\\n    char* buffer = new(std::nothrow) char[bufferSize];\\r\\n    if (!buffer) {\\r\\n        std::cerr << \"Error: Memory allocation failed.\" << std::endl;\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // Step 3: Secure Buffer Initialization\\r\\n    std::memset(buffer, 0, bufferSize);\\r\\n\\r\\n    // Step 4: Safe Printing\\r\\n    std::cout << \"Buffer contents: \";\\r\\n    for (int i = 0; i < bufferSize; ++i) {\\r\\n        std::cout << static_cast<int>(buffer[i]) << \" \";\\r\\n    }\\r\\n    std::cout << std::endl;\\r\\n\\r\\n    // Step 5: Memory Deallocation\\r\\n    delete[] buffer;\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-416"}
{"text": "Generate C++ code for the following: The code allocates a buffer of size buffer_size.Then it frees the buffer in a loop. ", "BP": ["Error Handling", "Memory Initialization", "Memory Deallocation", "Appropriate Memory Management"], "code": "#include <iostream>\\r\\n#include <stdexcept>\\r\\n\\r\\nvoid allocateAndFreeBuffer(size_t buffer_size, int iterations) {\\r\\n    for (int i = 0; i < iterations; ++i) {\\r\\n        // Allocate memory\\r\\n        int* buffer = nullptr;\\r\\n        try {\\r\\n            buffer = new int[buffer_size];\\r\\n        } catch (const std::bad_alloc& e) {\\r\\n            std::cerr << \"Memory allocation failed: \" << e.what() << std::endl;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Initialize memory\\r\\n        for (size_t j = 0; j < buffer_size; ++j) {\\r\\n            buffer[j] = static_cast<int>(j);\\r\\n        }\\r\\n\\r\\n        // Perform operations on buffer (if any)\\r\\n        // ...\\r\\n\\r\\n        // Free memory\\r\\n        delete[] buffer;\\r\\n        buffer = nullptr;\\r\\n    }\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    size_t buffer_size = 100;\\r\\n    int iterations = 10;\\r\\n\\r\\n    allocateAndFreeBuffer(buffer_size, iterations);\\r\\n\\r\\n    return 0;\\r\\n}", "CWE": "CWE-416"}
