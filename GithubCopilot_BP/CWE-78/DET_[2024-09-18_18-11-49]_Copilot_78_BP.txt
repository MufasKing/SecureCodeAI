==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\nimport os\\\n\\\n\\\n\\\ndef get_user_info(username):\\\n\\\n # Input Sanitization\\\n\\\n if not username.isalnum():\\\n\\\n raise ValueError("Username must be alphanumeric.")\\\n\\\n \\\n\\\n # Secure Subprocess Execution with popen()\\\n\\\n try:\\\n\\\n # Using shlex to ensure that the username is safely incorporated into the command\\\n\\\n command = shlex.split(f'getent passwd {username}')\\\n\\\n \\\n\\\n # Using subprocess.Popen for secure subprocess execution\\\n\\\n with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) as proc:\\\n\\\n output, errors = proc.communicate()\\\n\\\n \\\n\\\n # Error Handling\\\n\\\n if proc.returncode != 0:\\\n\\\n raise Exception(f"Error executing command: {errors}")\\\n\\\n \\\n\\\n # Secure File Handling\\\n\\\n # Principle of Least Privilege: Using 'w' mode to ensure only write operation on the file\\\n\\\n with open("user_info.txt", "w") as file_pointer:\\\n\\\n file_pointer.write(output)\\\n\\\n \\\n\\\n print("User information successfully written to user_info.txt")\\\n\\\n \\\n\\\n except Exception as e:\\\n\\\n print(f"An error occurred: {e}")\\\n\\\n\\\n\\\n# Example usage\\\n\\\nget_user_info("exampleusername") 

(!) VULN CODE [ 1.0 s ] , Injection : import subprocess\\\n\\\nimport sys\\\n\\\nimport re\\\n\\\n\\\n\\\ndef get_user_info(username):\\\n\\\n # Input Sanitization\\\n\\\n if not re.match(r'^[a-zA-Z0-9_-]+$', username):\\\n\\\n raise ValueError("Invalid username. Username must consist of letters, numbers, underscores, or dashes.")\\\n\\\n\\\n\\\n # Secure Pattern Matching\\\n\\\n safe_username = re.escape(username)\\\n\\\n\\\n\\\n # Secure File Reading and Command Execution\\\n\\\n try:\\\n\\\n command = f"grep '{safe_username}' /etc/passwd"\\\n\\\n process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)\\\n\\\n output, error = process.communicate()\\\n\\\n\\\n\\\n if process.returncode != 0:\\\n\\\n raise subprocess.CalledProcessError(process.returncode, command, output=output, stderr=error)\\\n\\\n\\\n\\\n if output:\\\n\\\n print(output)\\\n\\\n else:\\\n\\\n print(f"No user information found for {username}")\\\n\\\n\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"Error executing command: {e.stderr}")\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n if len(sys.argv) != 2:\\\n\\\n print("Usage: python script.py <username>")\\\n\\\n sys.exit(1)\\\n\\\n\\\n\\\n username = sys.argv[1]\\\n\\\n\\\n\\\n # Principle of Least Privilege\\\n\\\n if not subprocess.getoutput('id -u') == '0':\\\n\\\n print("This script should not be run as root or with sudo privileges for security reasons.")\\\n\\\n sys.exit(1)\\\n\\\n\\\n\\\n get_user_info(username) 

==> SAFE CODE [ 0 s ] : import subprocess\\\n\\\nimport sys\\\n\\\nimport re\\\n\\\n\\\n\\\ndef run_id_command(username):\\\n\\\n # Input validation and sanitization\\\n\\\n if not re.match(r"^[a-zA-Z0-9._-]+$", username):\\\n\\\n print("Invalid username. Only alphanumeric characters, dots, underscores, and dashes are allowed.")\\\n\\\n return 1 # Non-zero exit status for invalid input\\\n\\\n\\\n\\\n try:\\\n\\\n # Secure command execution\\\n\\\n completed_process = subprocess.run(["id", username], check=True, text=True, capture_output=True)\\\n\\\n print(completed_process.stdout)\\\n\\\n return 0 # Zero exit status for success\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"An error occurred while executing the command: {e}")\\\n\\\n return e.returncode # Non-zero exit status for command failure\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n return 1 # Non-zero exit status for unexpected errors\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n if len(sys.argv) != 2:\\\n\\\n print("Usage: python script.py <username>")\\\n\\\n sys.exit(1) # Secure exit with non-zero status for incorrect usage\\\n\\\n\\\n\\\n exit_status = run_id_command(sys.argv[1])\\\n\\\n print(f"Exit status: {exit_status}")\\\n\\\n sys.exit(exit_status) # Secure exit with the command's exit status 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nfrom flask import Flask, request, escape\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\ndef validate_url(func):\\\n\\\n def wrapper(*args, **kwargs):\\\n\\\n url = request.args.get('url',\")\\\n\\\n # Basic URL validation pattern, adjust as needed\\\n\\\n pattern = re.compile(\\\n\\\n r'^(?:http|ftp)s?://' # http:// or https://\\\n\\\n r'(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)' # domain\\\n\\\n r'(?:/?|[/?]\S+)$', re.IGNORECASE)\\\n\\\n if not pattern.match(url):\\\n\\\n return "Invalid URL", 400\\\n\\\n return func(*args, **kwargs)\\\n\\\n return wrapper\\\n\\\n\\\n\\\n@app.route('/ping', methods=['GET'])\\\n\\\n@validate_url\\\n\\\ndef ping():\\\n\\\n try:\\\n\\\n url = request.args.get('url',\")\\\n\\\n # Ensure the URL is safe to pass to a shell command\\\n\\\n safe_url = re.sub(r'[^a-zA-Z0-9.:-]',\", url)\\\n\\\n # Use subprocess to safely run the ping command\\\n\\\n result = subprocess.run(['ping', '-c', '4', safe_url], capture_output=True, text=True)\\\n\\\n output = result.stdout\\\n\\\n # Escape the output to prevent XSS attacks if displaying in a web page\\\n\\\n safe_output = escape(output)\\\n\\\n return safe_output\\\n\\\n except Exception as e:\\\n\\\n return f"An error occurred: {str(e)}", 500\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nfrom flask import Flask, request, jsonify\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\n# Decorator for binding a function to a URL\\\n\\\ndef route(url):\\\n\\\n def decorator(func):\\\n\\\n app.route(url, methods=['GET', 'POST'])(func)\\\n\\\n return func\\\n\\\n return decorator\\\n\\\n\\\n\\\n# Input sanitization and validation for URL\\\n\\\ndef is_valid_url(url):\\\n\\\n # Simple regex for URL validation\\\n\\\n regex = re.compile(\\\n\\\n r'^(?:http|ftp)s?://' # http:// or https://\\\n\\\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' # domain...\\\n\\\n r'localhost|' # localhost...\\\n\\\n r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip\\\n\\\n r'(?::\d+)?' # optional port\\\n\\\n r'(?:/?|[/?]\S+)$', re.IGNORECASE)\\\n\\\n return re.match(regex, url) is not None\\\n\\\n\\\n\\\n@route('/ping')\\\n\\\ndef ping():\\\n\\\n if request.method == 'POST':\\\n\\\n url = request.form.get('url',\")\\\n\\\n if is_valid_url(url):\\\n\\\n try:\\\n\\\n # Using subprocess to run the ping command securely\\\n\\\n result = subprocess.run(['ping', '-c', '4', url], capture_output=True, text=True)\\\n\\\n if result.returncode == 0:\\\n\\\n return jsonify({'url': url, 'output': result.stdout}), 200\\\n\\\n else:\\\n\\\n return jsonify({'error': 'Ping failed'}), 400\\\n\\\n except Exception as e:\\\n\\\n return jsonify({'error': str(e)}), 500\\\n\\\n else:\\\n\\\n return jsonify({'error': 'Invalid URL'}), 400\\\n\\\n else:\\\n\\\n return jsonify({'error': 'Invalid request method'}), 405\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nfrom functools import wraps\\\n\\\nfrom flask import Flask, request, jsonify\\\n\\\nimport re\\\n\\\n\\\n\\\napp = Flask(__name__)\\\n\\\n\\\n\\\ndef validate_url(func):\\\n\\\n @wraps(func)\\\n\\\n def wrapper(*args, **kwargs):\\\n\\\n url = kwargs.get('url', args[0] if args else\")\\\n\\\n # Basic URL validation\\\n\\\n if not re.match(r'^https?://[a-zA-Z0-9.-]+(?:\:[0-9]+)?$', url):\\\n\\\n return jsonify({"error": "Invalid URL"}), 400\\\n\\\n return func(*args, **kwargs)\\\n\\\n return wrapper\\\n\\\n\\\n\\\ndef secure_ping(func):\\\n\\\n @wraps(func)\\\n\\\n def wrapper(*args, **kwargs):\\\n\\\n try:\\\n\\\n # Sanitize URL to prevent command injection\\\n\\\n sanitized_url = re.sub(r'[^a-zA-Z0-9.:/-]',\", kwargs['url'])\\\n\\\n # Execute ping command securely\\\n\\\n result = subprocess.run(["ping", "-c", "1", sanitized_url], capture_output=True, text=True)\\\n\\\n pong = result.stdout\\\n\\\n if result.returncode == 0:\\\n\\\n return jsonify({"url": sanitized_url, "alive": True, "output": pong})\\\n\\\n else:\\\n\\\n return jsonify({"url": sanitized_url, "alive": False, "output": pong})\\\n\\\n except Exception as e:\\\n\\\n return jsonify({"error": str(e)}), 500\\\n\\\n return wrapper\\\n\\\n\\\n\\\n@app.route('/ping/<path:url>')\\\n\\\n@validate_url\\\n\\\n@secure_ping\\\n\\\ndef ping(url):\\\n\\\n # The actual ping logic is handled by the decorators\\\n\\\n pass\\\n\\\n\\\n\\\nif __name__ == '__main__':\\\n\\\n app.run( ) 

==> SAFE CODE [ 0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\n\\\n\\\ndef secure_ls_command(directory):\\\n\\\n """\\\n\\\n Executes the 'ls' command securely on the specified directory, ensuring input sanitization,\\\n\\\n secure subprocess execution, error handling, and adherence to the principle of least privilege.\\\n\\\n \\\n\\\n Parameters:\\\n\\\n directory (str): The directory to list contents of.\\\n\\\n """\\\n\\\n # Input sanitization\\\n\\\n if not isinstance(directory, str):\\\n\\\n raise ValueError("Directory path must be a string.")\\\n\\\n sanitized_directory = shlex.quote(directory)\\\n\\\n \\\n\\\n # Secure subprocess execution with error handling\\\n\\\n try:\\\n\\\n # Using subprocess.run for secure execution, avoiding shell=True\\\n\\\n result = subprocess.run(["ls", sanitized_directory], text=True, capture_output=True, check=True)\\\n\\\n print(result.stdout)\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"An error occurred while trying to list the contents of {sanitized_directory}: {e}")\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n\\\n\\\n# Example usage\\\n\\\nsecure_ls_command("/path/to/directory") 

==> SAFE CODE [ 1.0 s ] : import subprocess\\\n\\\nimport shlex\\\n\\\n\\\n\\\ndef execute_command(command):\\\n\\\n """\\\n \\\n Executes a given command securely using subprocess module.\\\n\\\n \\\n\\\n Args:\\\n\\\n - command (str): The command to be executed.\\\n\\\n \\\n\\\n Returns:\\\n\\\n - output (str): The output of the executed command.\\\n\\\n - error (str): The error message if command execution fails.\\\n\\\n """\\\n\\\n try:\\\n\\\n # Securely parse the command to avoid shell injection vulnerabilities\\\n\\\n safe_command = shlex.split(command)\\\n\\\n \\\n\\\n # Execute the command without opening a shell\\\n\\\n process = subprocess.Popen(safe_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\\\n\\\n output, error = process.communicate()\\\n\\\n \\\n\\\n if process.returncode == 0:\\\n\\\n return output, None\\\n\\\n else:\\\n\\\n return None, error\\\n\\\n except Exception as e:\\\n\\\n return None, str(e)\\\n\\\n\\\n\\\ndef main():\\\n\\\n # Example usage\\\n\\\n directory = "/path/to/directory"\\\n\\\n \\\n\\\n # Input validation and sanitization\\\n\\\n if not isinstance(directory, str):\\\n\\\n print("Error: Directory path must be a string.")\\\n\\\n return\\\n\\\n \\\n\\\n # Replace potentially dangerous characters or sequences\\\n\\\n sanitized_directory = directory.replace(";", "").replace("&", "").replace("`", "")\\\n\\\n \\\n\\\n # Construct the command string securely\\\n\\\n command = f"ls {shlex.quote(sanitized_directory)}"\\\n\\\n \\\n\\\n # Execute the command\\\n\\\n output, error = execute_command(command)\\\n\\\n \\\n\\\n if error:\\\n\\\n print(f"Error executing command: {error}")\\\n\\\n else:\\\n\\\n print(f"Command output:{output}")\\\n\\\n\\\n\\\nif __name__ == "__main__":\\\n\\\n main() 

(!) VULN CODE [ 0 s ] , Injection : import os\\\n\\\nimport shlex\\\n\\\nimport subprocess\\\n\\\n\\\n\\\ndef secure_ls_command(directory):\\\n\\\n # Input Validation\\\n\\\n if not isinstance(directory, str):\\\n\\\n raise ValueError("Directory path must be a string.")\\\n\\\n \\\n\\\n # Input Sanitization\\\n\\\n sanitized_directory = shlex.quote(directory)\\\n\\\n \\\n\\\n # Secure Command Execution\\\n\\\n command = f"ls {sanitized_directory}"\\\n\\\n try:\\\n\\\n # Using subprocess.run instead of os.system for better security and control\\\n\\\n result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)\\\n\\\n print(f"Contents of {directory}:{result.stdout}")\\\n\\\n except subprocess.CalledProcessError as e:\\\n\\\n print(f"An error occurred while trying to list the contents of {directory}: {e}")\\\n\\\n except Exception as e:\\\n\\\n print(f"An unexpected error occurred: {e}")\\\n\\\n\\\n\\\n# Example usage\\\n\\\ndirectory = "/path/to/directory"\\\n\\\nsecure_ls_command(directory) 





=================>          DATASET SIZE         <=================

#DimTestSet: 9 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 2 

#SafeCode: 7 

Vulnerability Rate: 22,2222 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 2 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 5.0 s 

Average runtime per snippet: 0,555556 s 

